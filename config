versions pytest-8.3.5, python-3.12.3.final.0
invocation_dir=/home/hericdev/MEDIA_PROJECTS/Datascope
cwd=/home/hericdev/MEDIA_PROJECTS/Datascope
args=()

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x75368c7d3e30>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x75368c7d3e30>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x75368b074710>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x75368b3e3f20>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
          plugin_name: 128877141888512
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x75368c7d3e30>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/pytest_cov/plugin.py'>
          plugin_name: pytest_cov
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/anyio/pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x75368b2250d0>
          plugin_name: _cov
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x75368b074710>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x75368b3e3f20>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x75368b074c50>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x75368b224c80>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
          plugin_name: 128877141888512
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x75368c7d3e30>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/mark/__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/python_path.py'>
          plugin_name: python_path
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/pytest_cov/plugin.py'>
          plugin_name: pytest_cov
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/anyio/pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=5 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=6 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=7 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=8 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=3 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <pytest_cov.plugin.CovPlugin object at 0x75368b2250d0>
          plugin_name: _cov
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x75368b074710>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x75368b3e3f20>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x75368b074c50>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x75368b224c80>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x75368b0c9dc0>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x75368c430e00>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x75368c7d3e30>
          start_path: /home/hericdev/MEDIA_PROJECTS/Datascope
          startdir: /home/hericdev/MEDIA_PROJECTS/Datascope
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      finish pytest_report_header --> [['rootdir: /home/hericdev/MEDIA_PROJECTS/Datascope', 'configfile: pyproject.toml', 'testpaths: tests_pytest/unit, tests_pytest/integration', 'plugins: cov-6.1.1, anyio-4.9.0'], ['using: pytest-8.3.5', 'registered third-party plugins:', '  pytest-cov-6.1.1 at /home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/pytest_cov/plugin.py', '  anyio-4.9.0 at /home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/anyio/pytest_plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests_pytest/unit', 'tests_pytest/integration'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=PosixPath('/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: /home/hericdev/MEDIA_PROJECTS/Datascope
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir Datascope> [hook]
            pytest_collectstart [hook]
                collector: <Dir Datascope>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Dir Datascope>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.dockerignore
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.dockerignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.dockerignore
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.dockerignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.prod
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.prod
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.prod
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.prod
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.sample
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.sample
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.sample
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.env.sample
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.git
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.git
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.github
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.github
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.gitignore
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.gitignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.gitignore
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.gitignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/.pytest_cache
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/.pytest_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/Dockerfile
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/Dockerfile
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/Dockerfile
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/Dockerfile
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/README.md
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/README.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/README.md
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/README.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/__pycache__
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/__pycache__
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/app
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/app
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/app
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Package app> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/config
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/config
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/config
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/config
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/core
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/core
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/core
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Package core> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/docker-compose.yml
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/docker-compose.yml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/docker-compose.yml
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/docker-compose.yml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/feedbacks.json
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/feedbacks.json
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/feedbacks.json
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/feedbacks.json
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/main.py
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/main.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/main.py
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/main.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/medias
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/medias
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/medias
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Dir medias> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/models.py
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/models.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/models.py
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/models.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/pyproject.toml
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/pyproject.toml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/pyproject.toml
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/pyproject.toml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/requirements.txt
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/requirements.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/requirements.txt
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/requirements.txt
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/samples
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/samples
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/samples
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Dir samples> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/setup.cfg
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/setup.cfg
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/setup.cfg
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/setup.cfg
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/static
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/static
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/static
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Dir static> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/templates
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/templates
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/templates
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Dir templates> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Package tests> [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Package tests_pytest> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/uploads
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/uploads
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/uploads
                  parent: <Dir Datascope>
              finish pytest_collect_directory --> <Dir uploads> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/users.json
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/users.json
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir Datascope>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/users.json
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/users.json
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/venv
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/venv
              finish pytest_ignore_collect --> True [hook]
            finish pytest_make_collect_report --> <CollectReport '.' lenresult=9 outcome='passed'> [hook]
            pytest_collectstart [hook]
                collector: <Package tests_pytest>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Package tests_pytest>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/__init__.py
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/__init__.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Package tests_pytest>
                  file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/__init__.py
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/__init__.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x75368c7d3e30>
                  collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/__pycache__
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/__pycache__
              finish pytest_ignore_collect --> True [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration
                  parent: <Package tests_pytest>
              finish pytest_collect_directory --> <Dir integration> [hook]
              pytest_collect_directory [hook]
                  path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit
                  parent: <Package tests_pytest>
              finish pytest_collect_directory --> <Package unit> [hook]
            finish pytest_make_collect_report --> <CollectReport 'tests_pytest' lenresult=2 outcome='passed'> [hook]
        processing argument CollectionArgument(path=PosixPath('/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration'), parts=[], module_name=None) [collection]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=2 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=2 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package unit> [collection]
      pytest_collectstart [hook]
          collector: <Package unit>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package unit>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/__init__.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/__init__.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package unit>
            file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/__init__.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/__init__.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/__pycache__
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package unit>
            file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py
          pytest_pycollect_makemodule [hook]
              parent: <Package unit>
              module_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py
              path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py
          finish pytest_pycollect_makemodule --> <Module test_article_parser.py> [hook]
        finish pytest_collect_file --> [<Module test_article_parser.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package unit>
            file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py
          pytest_pycollect_makemodule [hook]
              parent: <Package unit>
              module_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py
              path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py
          finish pytest_pycollect_makemodule --> <Module test_export_utils.py> [hook]
        finish pytest_collect_file --> [<Module test_export_utils.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package unit>
            file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py
          pytest_pycollect_makemodule [hook]
              parent: <Package unit>
              module_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py
              path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py
          finish pytest_pycollect_makemodule --> <Module test_llm_engine.py> [hook]
        finish pytest_collect_file --> [<Module test_llm_engine.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Package unit>
            file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py
          pytest_pycollect_makemodule [hook]
              parent: <Package unit>
              module_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py
              path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py
          finish pytest_pycollect_makemodule --> <Module test_nlp_utils.py> [hook]
        finish pytest_collect_file --> [<Module test_nlp_utils.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/unit' lenresult=4 outcome='passed'> [hook]
    genitems <Module test_article_parser.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_article_parser.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_article_parser.py>
      early skip of rewriting module: tests_pytest [assertion]
      find_module called for: tests_pytest.unit [assertion]
      find_module called for: tests_pytest.unit.test_article_parser [assertion]
      matched test file '/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py' [assertion]
      found cached rewritten pyc for /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_article_parser.py [assertion]
      early skip of rewriting module: core [assertion]
      early skip of rewriting module: core.article_parser [assertion]
      early skip of rewriting module: docx [assertion]
      early skip of rewriting module: docx.api [assertion]
      early skip of rewriting module: docx.opc [assertion]
      early skip of rewriting module: docx.opc.constants [assertion]
      early skip of rewriting module: docx.package [assertion]
      early skip of rewriting module: docx.image [assertion]
      early skip of rewriting module: docx.image.bmp [assertion]
      early skip of rewriting module: docx.image.constants [assertion]
      early skip of rewriting module: docx.image.helpers [assertion]
      early skip of rewriting module: docx.image.exceptions [assertion]
      early skip of rewriting module: docx.image.image [assertion]
      early skip of rewriting module: docx.shared [assertion]
      early skip of rewriting module: docx.image.gif [assertion]
      early skip of rewriting module: docx.image.jpeg [assertion]
      early skip of rewriting module: docx.image.tiff [assertion]
      early skip of rewriting module: docx.image.png [assertion]
      early skip of rewriting module: docx.opc.package [assertion]
      early skip of rewriting module: docx.opc.packuri [assertion]
      early skip of rewriting module: docx.opc.part [assertion]
      early skip of rewriting module: docx.opc.oxml [assertion]
      early skip of rewriting module: lxml [assertion]
      early skip of rewriting module: lxml.etree [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: lxml._elementpath [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: lxml.re [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: rnc2rng [assertion]
      early skip of rewriting module: docx.opc.rel [assertion]
      early skip of rewriting module: docx.opc.shared [assertion]
      early skip of rewriting module: docx.oxml [assertion]
      early skip of rewriting module: docx.oxml.drawing [assertion]
      early skip of rewriting module: docx.oxml.xmlchemy [assertion]
      early skip of rewriting module: docx.oxml.exceptions [assertion]
      early skip of rewriting module: docx.oxml.ns [assertion]
      early skip of rewriting module: docx.oxml.parser [assertion]
      early skip of rewriting module: docx.oxml.shape [assertion]
      early skip of rewriting module: docx.oxml.simpletypes [assertion]
      early skip of rewriting module: docx.exceptions [assertion]
      early skip of rewriting module: docx.oxml.shared [assertion]
      early skip of rewriting module: docx.oxml.text [assertion]
      early skip of rewriting module: docx.oxml.text.hyperlink [assertion]
      early skip of rewriting module: docx.oxml.text.run [assertion]
      early skip of rewriting module: docx.oxml.text.font [assertion]
      early skip of rewriting module: docx.enum [assertion]
      early skip of rewriting module: docx.enum.dml [assertion]
      early skip of rewriting module: docx.enum.base [assertion]
      early skip of rewriting module: docx.enum.text [assertion]
      early skip of rewriting module: docx.oxml.text.pagebreak [assertion]
      early skip of rewriting module: docx.oxml.coreprops [assertion]
      early skip of rewriting module: docx.oxml.document [assertion]
      early skip of rewriting module: docx.oxml.section [assertion]
      early skip of rewriting module: docx.enum.section [assertion]
      early skip of rewriting module: docx.oxml.table [assertion]
      early skip of rewriting module: docx.enum.table [assertion]
      early skip of rewriting module: docx.oxml.text.paragraph [assertion]
      early skip of rewriting module: docx.oxml.numbering [assertion]
      early skip of rewriting module: docx.oxml.settings [assertion]
      early skip of rewriting module: docx.oxml.styles [assertion]
      early skip of rewriting module: docx.enum.style [assertion]
      early skip of rewriting module: docx.oxml.text.parfmt [assertion]
      early skip of rewriting module: docx.opc.parts [assertion]
      early skip of rewriting module: docx.opc.parts.coreprops [assertion]
      early skip of rewriting module: docx.opc.coreprops [assertion]
      early skip of rewriting module: docx.opc.pkgreader [assertion]
      early skip of rewriting module: docx.opc.phys_pkg [assertion]
      early skip of rewriting module: docx.opc.exceptions [assertion]
      early skip of rewriting module: docx.opc.pkgwriter [assertion]
      early skip of rewriting module: docx.opc.spec [assertion]
      early skip of rewriting module: docx.parts [assertion]
      early skip of rewriting module: docx.parts.image [assertion]
      early skip of rewriting module: docx.parts.document [assertion]
      early skip of rewriting module: docx.document [assertion]
      early skip of rewriting module: docx.blkcntnr [assertion]
      early skip of rewriting module: docx.text [assertion]
      early skip of rewriting module: docx.text.paragraph [assertion]
      early skip of rewriting module: docx.styles [assertion]
      early skip of rewriting module: docx.styles.style [assertion]
      early skip of rewriting module: docx.text.font [assertion]
      early skip of rewriting module: docx.dml [assertion]
      early skip of rewriting module: docx.dml.color [assertion]
      early skip of rewriting module: docx.text.parfmt [assertion]
      early skip of rewriting module: docx.text.tabstops [assertion]
      early skip of rewriting module: docx.text.hyperlink [assertion]
      early skip of rewriting module: docx.text.run [assertion]
      early skip of rewriting module: docx.drawing [assertion]
      early skip of rewriting module: docx.shape [assertion]
      early skip of rewriting module: docx.enum.shape [assertion]
      early skip of rewriting module: docx.text.pagebreak [assertion]
      early skip of rewriting module: docx.section [assertion]
      early skip of rewriting module: docx.parts.hdrftr [assertion]
      early skip of rewriting module: docx.parts.story [assertion]
      early skip of rewriting module: docx.table [assertion]
      early skip of rewriting module: docx.parts.numbering [assertion]
      early skip of rewriting module: docx.parts.settings [assertion]
      early skip of rewriting module: docx.settings [assertion]
      early skip of rewriting module: docx.parts.styles [assertion]
      early skip of rewriting module: docx.styles.styles [assertion]
      early skip of rewriting module: docx.styles.latent [assertion]
      early skip of rewriting module: pdfminer [assertion]
      early skip of rewriting module: pdfminer.high_level [assertion]
      early skip of rewriting module: pdfminer.converter [assertion]
      early skip of rewriting module: pdfminer.utils [assertion]
      early skip of rewriting module: html [assertion]
      early skip of rewriting module: html.entities [assertion]
      early skip of rewriting module: pdfminer.pdfexceptions [assertion]
      early skip of rewriting module: pdfminer.psexceptions [assertion]
      early skip of rewriting module: charset_normalizer [assertion]
      early skip of rewriting module: charset_normalizer.api [assertion]
      early skip of rewriting module: charset_normalizer.cd [assertion]
      early skip of rewriting module: charset_normalizer.constant [assertion]
      early skip of rewriting module: charset_normalizer.md [assertion]
      early skip of rewriting module: charset_normalizer.md__mypyc [assertion]
      early skip of rewriting module: charset_normalizer.utils [assertion]
      early skip of rewriting module: _multibytecodec [assertion]
      early skip of rewriting module: charset_normalizer.models [assertion]
      early skip of rewriting module: charset_normalizer.legacy [assertion]
      early skip of rewriting module: charset_normalizer.version [assertion]
      early skip of rewriting module: pdfminer.image [assertion]
      early skip of rewriting module: pdfminer.jbig2 [assertion]
      early skip of rewriting module: pdfminer.layout [assertion]
      early skip of rewriting module: pdfminer.pdfcolor [assertion]
      early skip of rewriting module: pdfminer.psparser [assertion]
      early skip of rewriting module: pdfminer.settings [assertion]
      early skip of rewriting module: pdfminer.pdffont [assertion]
      early skip of rewriting module: pdfminer.casting [assertion]
      early skip of rewriting module: pdfminer.cmapdb [assertion]
      early skip of rewriting module: pdfminer.encodingdb [assertion]
      early skip of rewriting module: pdfminer.glyphlist [assertion]
      early skip of rewriting module: pdfminer.latin_enc [assertion]
      early skip of rewriting module: pdfminer.fontmetrics [assertion]
      early skip of rewriting module: pdfminer.pdftypes [assertion]
      early skip of rewriting module: pdfminer.ascii85 [assertion]
      early skip of rewriting module: pdfminer.ccitt [assertion]
      early skip of rewriting module: pdfminer.lzw [assertion]
      early skip of rewriting module: pdfminer.runlength [assertion]
      early skip of rewriting module: pdfminer.pdfinterp [assertion]
      early skip of rewriting module: pdfminer.pdfdevice [assertion]
      early skip of rewriting module: pdfminer.pdfpage [assertion]
      early skip of rewriting module: pdfminer.pdfdocument [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: cryptography.utils [assertion]
      early skip of rewriting module: cryptography.__about__ [assertion]
      early skip of rewriting module: cryptography.hazmat [assertion]
      early skip of rewriting module: cryptography.hazmat.backends [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._cipheralgorithm [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings._rust [assertion]
      early skip of rewriting module: _cffi_backend [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
      early skip of rewriting module: cryptography.exceptions [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers.algorithms [assertion]
      early skip of rewriting module: pdfminer.arcfour [assertion]
      early skip of rewriting module: pdfminer.data_structures [assertion]
      early skip of rewriting module: pdfminer.pdfparser [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: chardet.charsetgroupprober [assertion]
      early skip of rewriting module: chardet.charsetprober [assertion]
      early skip of rewriting module: chardet.enums [assertion]
      early skip of rewriting module: chardet.resultdict [assertion]
      early skip of rewriting module: chardet.universaldetector [assertion]
      early skip of rewriting module: chardet.escprober [assertion]
      early skip of rewriting module: chardet.codingstatemachine [assertion]
      early skip of rewriting module: chardet.codingstatemachinedict [assertion]
      early skip of rewriting module: chardet.escsm [assertion]
      early skip of rewriting module: chardet.latin1prober [assertion]
      early skip of rewriting module: chardet.macromanprober [assertion]
      early skip of rewriting module: chardet.mbcsgroupprober [assertion]
      early skip of rewriting module: chardet.big5prober [assertion]
      early skip of rewriting module: chardet.chardistribution [assertion]
      early skip of rewriting module: chardet.big5freq [assertion]
      early skip of rewriting module: chardet.euckrfreq [assertion]
      early skip of rewriting module: chardet.euctwfreq [assertion]
      early skip of rewriting module: chardet.gb2312freq [assertion]
      early skip of rewriting module: chardet.jisfreq [assertion]
      early skip of rewriting module: chardet.johabfreq [assertion]
      early skip of rewriting module: chardet.mbcharsetprober [assertion]
      early skip of rewriting module: chardet.mbcssm [assertion]
      early skip of rewriting module: chardet.cp949prober [assertion]
      early skip of rewriting module: chardet.eucjpprober [assertion]
      early skip of rewriting module: chardet.jpcntx [assertion]
      early skip of rewriting module: chardet.euckrprober [assertion]
      early skip of rewriting module: chardet.euctwprober [assertion]
      early skip of rewriting module: chardet.gb2312prober [assertion]
      early skip of rewriting module: chardet.johabprober [assertion]
      early skip of rewriting module: chardet.sjisprober [assertion]
      early skip of rewriting module: chardet.utf8prober [assertion]
      early skip of rewriting module: chardet.sbcsgroupprober [assertion]
      early skip of rewriting module: chardet.hebrewprober [assertion]
      early skip of rewriting module: chardet.sbcharsetprober [assertion]
      early skip of rewriting module: chardet.langbulgarianmodel [assertion]
      early skip of rewriting module: chardet.langgreekmodel [assertion]
      early skip of rewriting module: chardet.langhebrewmodel [assertion]
      early skip of rewriting module: chardet.langrussianmodel [assertion]
      early skip of rewriting module: chardet.langthaimodel [assertion]
      early skip of rewriting module: chardet.langturkishmodel [assertion]
      early skip of rewriting module: chardet.utf1632prober [assertion]
      early skip of rewriting module: chardet.version [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: tempfile
            obj: <module 'tempfile' from '/usr/lib/python3.12/tempfile.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: Path
            obj: <class 'pathlib.Path'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: read_txt
            obj: <function read_txt at 0x75368b0fa660>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: read_pdf
            obj: <function read_pdf at 0x75368a7d4180>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: read_docx
            obj: <function read_docx at 0x753689915d00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: extract_article_text
            obj: <function extract_article_text at 0x753689915da0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: docx
            obj: <module 'docx' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/docx/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_read_txt_with_utf8_encoding
            obj: <function test_read_txt_with_utf8_encoding at 0x75368b0fa480>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0caf60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_read_txt_with_utf8_encoding>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: generate_sample_pdf
            obj: <function generate_sample_pdf at 0x75368b0fa5c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_read_pdf_extracts_text
            obj: <function test_read_pdf_extracts_text at 0x75368b0fa520>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0caf60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_read_pdf_extracts_text>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_read_docx_extracts_all_paragraphs
            obj: <function test_read_docx_extracts_all_paragraphs at 0x753689915e40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0cafc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_read_docx_extracts_all_paragraphs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_extract_article_text_with_txt
            obj: <function test_extract_article_text_with_txt at 0x753689915ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0caf60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_article_text_with_txt>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_extract_article_text_with_docx
            obj: <function test_extract_article_text_with_docx at 0x753689915f80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0cafc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_article_text_with_docx>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_extract_article_text_raises_on_unknown_extension
            obj: <function test_extract_article_text_raises_on_unknown_extension at 0x753689916020>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0caf60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_article_text_raises_on_unknown_extension>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_article_parser.py>
            name: test_extract_article_text_with_pdf
            obj: <function test_extract_article_text_with_pdf at 0x7536899160c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0cafc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_article_text_with_pdf>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/unit/test_article_parser.py' lenresult=7 outcome='passed'> [hook]
    genitems <Function test_read_txt_with_utf8_encoding> [collection]
      pytest_itemcollected [hook]
          item: <Function test_read_txt_with_utf8_encoding>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_read_pdf_extracts_text> [collection]
      pytest_itemcollected [hook]
          item: <Function test_read_pdf_extracts_text>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_read_docx_extracts_all_paragraphs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_read_docx_extracts_all_paragraphs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_article_text_with_txt> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_article_text_with_txt>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_article_text_with_docx> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_article_text_with_docx>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_article_text_raises_on_unknown_extension> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_article_text_raises_on_unknown_extension>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_article_text_with_pdf> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_article_text_with_pdf>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/unit/test_article_parser.py' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_export_utils.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_export_utils.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_export_utils.py>
      find_module called for: tests_pytest.unit.test_export_utils [assertion]
      matched test file '/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py' [assertion]
      found cached rewritten pyc for /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_export_utils.py [assertion]
      early skip of rewriting module: core.export_utils [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_export_utils.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_export_utils.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_export_utils.py>
            name: export_analysis_to_markdown
            obj: <function export_analysis_to_markdown at 0x753689916e80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_export_utils.py>
            name: test_export_analysis_to_markdown_english_full_coverage
            obj: <function test_export_analysis_to_markdown_english_full_coverage at 0x753689916980>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368990af00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_export_analysis_to_markdown_english_full_coverage>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_export_utils.py>
            name: test_export_analysis_to_markdown_creates_valid_structure
            obj: <function test_export_analysis_to_markdown_creates_valid_structure at 0x753689916c00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368990adb0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_export_analysis_to_markdown_creates_valid_structure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_export_utils.py>
            name: test_export_analysis_handles_empty_entities
            obj: <function test_export_analysis_handles_empty_entities at 0x753689916ac0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368990ae10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_export_analysis_handles_empty_entities>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/unit/test_export_utils.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_export_analysis_to_markdown_english_full_coverage> [collection]
      pytest_itemcollected [hook]
          item: <Function test_export_analysis_to_markdown_english_full_coverage>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_export_analysis_to_markdown_creates_valid_structure> [collection]
      pytest_itemcollected [hook]
          item: <Function test_export_analysis_to_markdown_creates_valid_structure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_export_analysis_handles_empty_entities> [collection]
      pytest_itemcollected [hook]
          item: <Function test_export_analysis_handles_empty_entities>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/unit/test_export_utils.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_llm_engine.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_llm_engine.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_llm_engine.py>
      find_module called for: tests_pytest.unit.test_llm_engine [assertion]
      matched test file '/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py' [assertion]
      found cached rewritten pyc for /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_llm_engine.py [assertion]
      early skip of rewriting module: core.llm_engine [assertion]
      early skip of rewriting module: openai [assertion]
      early skip of rewriting module: openai.types [assertion]
      early skip of rewriting module: openai.types.batch [assertion]
      early skip of rewriting module: openai._models [assertion]
      early skip of rewriting module: pydantic [assertion]
      early skip of rewriting module: pydantic._migration [assertion]
      early skip of rewriting module: pydantic.version [assertion]
      early skip of rewriting module: pydantic_core [assertion]
      early skip of rewriting module: pydantic_core._pydantic_core [assertion]
      early skip of rewriting module: pydantic_core.core_schema [assertion]
      early skip of rewriting module: pydantic.errors [assertion]
      early skip of rewriting module: typing_inspection [assertion]
      early skip of rewriting module: typing_inspection.introspection [assertion]
      early skip of rewriting module: typing_inspection.typing_objects [assertion]
      early skip of rewriting module: pydantic._internal [assertion]
      early skip of rewriting module: pydantic._internal._repr [assertion]
      early skip of rewriting module: pydantic._internal._typing_extra [assertion]
      early skip of rewriting module: pydantic._internal._namespace_utils [assertion]
      early skip of rewriting module: pydantic.generics [assertion]
      early skip of rewriting module: pydantic.fields [assertion]
      early skip of rewriting module: annotated_types [assertion]
      early skip of rewriting module: pydantic._internal._validators [assertion]
      early skip of rewriting module: fractions [assertion]
      early skip of rewriting module: zoneinfo [assertion]
      early skip of rewriting module: zoneinfo._tzpath [assertion]
      early skip of rewriting module: zoneinfo._common [assertion]
      early skip of rewriting module: _zoneinfo [assertion]
      early skip of rewriting module: pydantic._internal._import_utils [assertion]
      early skip of rewriting module: pydantic.types [assertion]
      early skip of rewriting module: pydantic._internal._fields [assertion]
      early skip of rewriting module: pydantic.warnings [assertion]
      early skip of rewriting module: pydantic._internal._generics [assertion]
      early skip of rewriting module: pydantic._internal._core_utils [assertion]
      early skip of rewriting module: pydantic._internal._forward_ref [assertion]
      early skip of rewriting module: pydantic._internal._utils [assertion]
      early skip of rewriting module: pydantic._internal._config [assertion]
      early skip of rewriting module: pydantic.aliases [assertion]
      early skip of rewriting module: pydantic._internal._internal_dataclass [assertion]
      early skip of rewriting module: pydantic.config [assertion]
      early skip of rewriting module: pydantic._internal._docs_extraction [assertion]
      early skip of rewriting module: pydantic.annotated_handlers [assertion]
      early skip of rewriting module: pydantic.json_schema [assertion]
      early skip of rewriting module: pydantic._internal._core_metadata [assertion]
      early skip of rewriting module: pydantic._internal._decorators [assertion]
      early skip of rewriting module: pydantic._internal._mock_val_ser [assertion]
      early skip of rewriting module: pydantic.plugin [assertion]
      early skip of rewriting module: pydantic.plugin._schema_validator [assertion]
      early skip of rewriting module: pydantic._internal._schema_generation_shared [assertion]
      early skip of rewriting module: openai._types [assertion]
      early skip of rewriting module: httpx [assertion]
      early skip of rewriting module: httpx.__version__ [assertion]
      early skip of rewriting module: httpx._api [assertion]
      early skip of rewriting module: httpx._client [assertion]
      early skip of rewriting module: httpx._auth [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: httpx._exceptions [assertion]
      early skip of rewriting module: httpx._models [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: httpx._content [assertion]
      early skip of rewriting module: httpx._multipart [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: _winapi [assertion]
      early skip of rewriting module: winreg [assertion]
      early skip of rewriting module: httpx._types [assertion]
      early skip of rewriting module: httpx._utils [assertion]
      early skip of rewriting module: httpx._decoders [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: httpx._status_codes [assertion]
      early skip of rewriting module: httpx._urls [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: httpx._urlparse [assertion]
      early skip of rewriting module: httpx._config [assertion]
      early skip of rewriting module: httpx._transports [assertion]
      early skip of rewriting module: httpx._transports.asgi [assertion]
      early skip of rewriting module: httpx._transports.base [assertion]
      early skip of rewriting module: httpx._transports.default [assertion]
      early skip of rewriting module: httpx._transports.mock [assertion]
      early skip of rewriting module: httpx._transports.wsgi [assertion]
      early skip of rewriting module: httpx._main [assertion]
      early skip of rewriting module: click [assertion]
      early skip of rewriting module: click.core [assertion]
      early skip of rewriting module: click.types [assertion]
      early skip of rewriting module: click._compat [assertion]
      early skip of rewriting module: click.exceptions [assertion]
      early skip of rewriting module: click.globals [assertion]
      early skip of rewriting module: click.utils [assertion]
      early skip of rewriting module: click.formatting [assertion]
      early skip of rewriting module: click.parser [assertion]
      early skip of rewriting module: click.termui [assertion]
      early skip of rewriting module: click.decorators [assertion]
      early skip of rewriting module: pygments [assertion]
      early skip of rewriting module: pygments.lexers [assertion]
      early skip of rewriting module: pygments.lexers._mapping [assertion]
      early skip of rewriting module: pygments.modeline [assertion]
      early skip of rewriting module: pygments.plugin [assertion]
      early skip of rewriting module: pygments.util [assertion]
      early skip of rewriting module: rich [assertion]
      early skip of rewriting module: rich._extension [assertion]
      early skip of rewriting module: rich.console [assertion]
      early skip of rewriting module: getpass [assertion]
      early skip of rewriting module: termios [assertion]
      early skip of rewriting module: rich._null_file [assertion]
      early skip of rewriting module: rich.errors [assertion]
      early skip of rewriting module: rich.themes [assertion]
      early skip of rewriting module: rich.default_styles [assertion]
      early skip of rewriting module: rich.style [assertion]
      early skip of rewriting module: rich.color [assertion]
      early skip of rewriting module: colorsys [assertion]
      early skip of rewriting module: rich._palettes [assertion]
      early skip of rewriting module: rich.palette [assertion]
      early skip of rewriting module: rich.color_triplet [assertion]
      early skip of rewriting module: rich.repr [assertion]
      early skip of rewriting module: rich.terminal_theme [assertion]
      early skip of rewriting module: rich.theme [assertion]
      early skip of rewriting module: rich._emoji_replace [assertion]
      early skip of rewriting module: rich._emoji_codes [assertion]
      early skip of rewriting module: rich._export_format [assertion]
      early skip of rewriting module: rich._fileno [assertion]
      early skip of rewriting module: rich._log_render [assertion]
      early skip of rewriting module: rich.text [assertion]
      early skip of rewriting module: rich._loop [assertion]
      early skip of rewriting module: rich._pick [assertion]
      early skip of rewriting module: rich._wrap [assertion]
      early skip of rewriting module: rich.cells [assertion]
      early skip of rewriting module: rich._cell_widths [assertion]
      early skip of rewriting module: rich.align [assertion]
      early skip of rewriting module: rich.constrain [assertion]
      early skip of rewriting module: rich.jupyter [assertion]
      early skip of rewriting module: rich.segment [assertion]
      early skip of rewriting module: rich.measure [assertion]
      early skip of rewriting module: rich.protocol [assertion]
      early skip of rewriting module: rich.containers [assertion]
      early skip of rewriting module: rich.control [assertion]
      early skip of rewriting module: rich.emoji [assertion]
      early skip of rewriting module: rich.highlighter [assertion]
      early skip of rewriting module: rich.markup [assertion]
      early skip of rewriting module: rich.pager [assertion]
      early skip of rewriting module: rich.pretty [assertion]
      early skip of rewriting module: attr [assertion]
      early skip of rewriting module: rich.abc [assertion]
      early skip of rewriting module: rich.region [assertion]
      early skip of rewriting module: rich.scope [assertion]
      early skip of rewriting module: rich.panel [assertion]
      early skip of rewriting module: rich.box [assertion]
      early skip of rewriting module: rich.padding [assertion]
      early skip of rewriting module: rich.table [assertion]
      early skip of rewriting module: rich._ratio [assertion]
      early skip of rewriting module: rich.screen [assertion]
      early skip of rewriting module: rich.styled [assertion]
      early skip of rewriting module: rich.progress [assertion]
      early skip of rewriting module: mmap [assertion]
      early skip of rewriting module: rich.filesize [assertion]
      early skip of rewriting module: rich.live [assertion]
      early skip of rewriting module: rich.file_proxy [assertion]
      early skip of rewriting module: rich.ansi [assertion]
      early skip of rewriting module: rich.live_render [assertion]
      early skip of rewriting module: rich.progress_bar [assertion]
      early skip of rewriting module: rich.spinner [assertion]
      early skip of rewriting module: rich._spinners [assertion]
      early skip of rewriting module: rich.syntax [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.token [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.style [assertion]
      early skip of rewriting module: pygments.styles [assertion]
      early skip of rewriting module: pygments.styles._mapping [assertion]
      early skip of rewriting module: pydantic.main [assertion]
      early skip of rewriting module: pydantic._internal._model_construction [assertion]
      early skip of rewriting module: pydantic._internal._generate_schema [assertion]
      early skip of rewriting module: pydantic.functional_validators [assertion]
      early skip of rewriting module: pydantic._internal._discriminated_union [assertion]
      early skip of rewriting module: pydantic._internal._known_annotated_metadata [assertion]
      early skip of rewriting module: pydantic._internal._schema_gather [assertion]
      early skip of rewriting module: pydantic._internal._signature [assertion]
      early skip of rewriting module: openai._utils [assertion]
      early skip of rewriting module: openai._utils._logs [assertion]
      early skip of rewriting module: openai._utils._utils [assertion]
      early skip of rewriting module: openai._compat [assertion]
      early skip of rewriting module: pydantic.v1 [assertion]
      early skip of rewriting module: pydantic.v1.dataclasses [assertion]
      early skip of rewriting module: pydantic.v1.class_validators [assertion]
      early skip of rewriting module: pydantic.v1.errors [assertion]
      early skip of rewriting module: pydantic.v1.typing [assertion]
      early skip of rewriting module: pydantic.v1.utils [assertion]
      early skip of rewriting module: pydantic.v1.version [assertion]
      early skip of rewriting module: cython [assertion]
      early skip of rewriting module: pydantic.v1.config [assertion]
      early skip of rewriting module: pydantic.v1.error_wrappers [assertion]
      early skip of rewriting module: pydantic.v1.json [assertion]
      early skip of rewriting module: pydantic.v1.color [assertion]
      early skip of rewriting module: pydantic.v1.networks [assertion]
      early skip of rewriting module: pydantic.v1.validators [assertion]
      early skip of rewriting module: pydantic.v1.datetime_parse [assertion]
      early skip of rewriting module: pydantic.v1.types [assertion]
      early skip of rewriting module: pydantic.v1.fields [assertion]
      early skip of rewriting module: pydantic.v1.main [assertion]
      early skip of rewriting module: pydantic.v1.parse [assertion]
      early skip of rewriting module: pydantic.v1.schema [assertion]
      early skip of rewriting module: pydantic.v1.annotated_types [assertion]
      early skip of rewriting module: pydantic.v1.decorator [assertion]
      early skip of rewriting module: pydantic.v1.env_settings [assertion]
      early skip of rewriting module: pydantic.v1.tools [assertion]
      early skip of rewriting module: pydantic.plugin._loader [assertion]
      early skip of rewriting module: openai._utils._sync [assertion]
      early skip of rewriting module: openai._utils._proxy [assertion]
      early skip of rewriting module: openai._utils._typing [assertion]
      early skip of rewriting module: openai._utils._streams [assertion]
      early skip of rewriting module: openai._utils._transform [assertion]
      early skip of rewriting module: openai._files [assertion]
      early skip of rewriting module: openai._utils._reflection [assertion]
      early skip of rewriting module: openai._constants [assertion]
      early skip of rewriting module: pydantic.type_adapter [assertion]
      early skip of rewriting module: pydantic._internal._serializers [assertion]
      early skip of rewriting module: openai.types.batch_error [assertion]
      early skip of rewriting module: openai.types.shared [assertion]
      early skip of rewriting module: openai.types.shared.metadata [assertion]
      early skip of rewriting module: openai.types.shared.reasoning [assertion]
      early skip of rewriting module: openai.types.shared.reasoning_effort [assertion]
      early skip of rewriting module: openai.types.shared.all_models [assertion]
      early skip of rewriting module: openai.types.shared.chat_model [assertion]
      early skip of rewriting module: openai.types.shared.error_object [assertion]
      early skip of rewriting module: openai.types.shared.compound_filter [assertion]
      early skip of rewriting module: openai.types.shared.comparison_filter [assertion]
      early skip of rewriting module: openai.types.shared.responses_model [assertion]
      early skip of rewriting module: openai.types.shared.function_definition [assertion]
      early skip of rewriting module: openai.types.shared.function_parameters [assertion]
      early skip of rewriting module: openai.types.shared.response_format_text [assertion]
      early skip of rewriting module: openai.types.shared.response_format_json_object [assertion]
      early skip of rewriting module: openai.types.shared.response_format_json_schema [assertion]
      early skip of rewriting module: openai.types.batch_request_counts [assertion]
      early skip of rewriting module: openai.types.image [assertion]
      early skip of rewriting module: openai.types.model [assertion]
      early skip of rewriting module: openai.types.upload [assertion]
      early skip of rewriting module: openai.types.file_object [assertion]
      early skip of rewriting module: openai.types.embedding [assertion]
      early skip of rewriting module: openai.types.chat_model [assertion]
      early skip of rewriting module: openai.types.completion [assertion]
      early skip of rewriting module: openai.types.completion_usage [assertion]
      early skip of rewriting module: openai.types.completion_choice [assertion]
      early skip of rewriting module: openai.types.moderation [assertion]
      early skip of rewriting module: openai.types.audio_model [assertion]
      early skip of rewriting module: openai.types.image_model [assertion]
      early skip of rewriting module: openai.types.file_content [assertion]
      early skip of rewriting module: openai.types.file_deleted [assertion]
      early skip of rewriting module: openai.types.file_purpose [assertion]
      early skip of rewriting module: openai.types.vector_store [assertion]
      early skip of rewriting module: openai.types.model_deleted [assertion]
      early skip of rewriting module: openai.types.embedding_model [assertion]
      early skip of rewriting module: openai.types.images_response [assertion]
      early skip of rewriting module: openai.types.eval_list_params [assertion]
      early skip of rewriting module: openai.types.file_list_params [assertion]
      early skip of rewriting module: openai.types.moderation_model [assertion]
      early skip of rewriting module: openai.types.batch_list_params [assertion]
      early skip of rewriting module: openai.types.image_edit_params [assertion]
      early skip of rewriting module: openai.types.eval_create_params [assertion]
      early skip of rewriting module: openai.types.shared_params [assertion]
      early skip of rewriting module: openai.types.shared_params.metadata [assertion]
      early skip of rewriting module: openai.types.shared_params.reasoning [assertion]
      early skip of rewriting module: openai.types.shared_params.chat_model [assertion]
      early skip of rewriting module: openai.types.shared_params.compound_filter [assertion]
      early skip of rewriting module: openai.types.shared_params.comparison_filter [assertion]
      early skip of rewriting module: openai.types.shared_params.responses_model [assertion]
      early skip of rewriting module: openai.types.shared_params.reasoning_effort [assertion]
      early skip of rewriting module: openai.types.shared_params.function_definition [assertion]
      early skip of rewriting module: openai.types.shared_params.function_parameters [assertion]
      early skip of rewriting module: openai.types.shared_params.response_format_text [assertion]
      early skip of rewriting module: openai.types.shared_params.response_format_json_object [assertion]
      early skip of rewriting module: openai.types.shared_params.response_format_json_schema [assertion]
      early skip of rewriting module: openai.types.eval_string_check_grader_param [assertion]
      early skip of rewriting module: openai.types.eval_text_similarity_grader_param [assertion]
      early skip of rewriting module: openai.types.eval_list_response [assertion]
      early skip of rewriting module: openai.types.eval_label_model_grader [assertion]
      early skip of rewriting module: openai.types.eval_string_check_grader [assertion]
      early skip of rewriting module: openai.types.eval_text_similarity_grader [assertion]
      early skip of rewriting module: openai.types.eval_custom_data_source_config [assertion]
      early skip of rewriting module: openai.types.eval_stored_completions_data_source_config [assertion]
      early skip of rewriting module: openai.types.eval_update_params [assertion]
      early skip of rewriting module: openai.types.file_create_params [assertion]
      early skip of rewriting module: openai.types.batch_create_params [assertion]
      early skip of rewriting module: openai.types.eval_create_response [assertion]
      early skip of rewriting module: openai.types.eval_delete_response [assertion]
      early skip of rewriting module: openai.types.eval_update_response [assertion]
      early skip of rewriting module: openai.types.upload_create_params [assertion]
      early skip of rewriting module: openai.types.vector_store_deleted [assertion]
      early skip of rewriting module: openai.types.audio_response_format [assertion]
      early skip of rewriting module: openai.types.image_generate_params [assertion]
      early skip of rewriting module: openai.types.eval_retrieve_response [assertion]
      early skip of rewriting module: openai.types.file_chunking_strategy [assertion]
      early skip of rewriting module: openai.types.other_file_chunking_strategy_object [assertion]
      early skip of rewriting module: openai.types.static_file_chunking_strategy_object [assertion]
      early skip of rewriting module: openai.types.static_file_chunking_strategy [assertion]
      early skip of rewriting module: openai.types.upload_complete_params [assertion]
      early skip of rewriting module: openai.types.embedding_create_params [assertion]
      early skip of rewriting module: openai.types.completion_create_params [assertion]
      early skip of rewriting module: openai.types.chat [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_message [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_audio [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_message_tool_call [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_token_logprob [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_role [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_chunk [assertion]
      early skip of rewriting module: openai.types.chat.completion_list_params [assertion]
      early skip of rewriting module: openai.types.chat.parsed_chat_completion [assertion]
      early skip of rewriting module: openai.types.chat.parsed_function_tool_call [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_deleted [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_modality [assertion]
      early skip of rewriting module: openai.types.chat.completion_create_params [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_tool_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_audio_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_tool_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_content_part_text_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_user_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_content_part_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_content_part_image_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_content_part_input_audio_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_system_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_function_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_assistant_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_message_tool_call_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_content_part_refusal_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_developer_message_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_stream_options_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_prediction_content_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_tool_choice_option_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_named_tool_choice_param [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_function_call_option_param [assertion]
      early skip of rewriting module: openai.types.chat.completion_update_params [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_store_message [assertion]
      early skip of rewriting module: openai.types.chat.chat_completion_reasoning_effort [assertion]
      early skip of rewriting module: openai.types.moderation_create_params [assertion]
      early skip of rewriting module: openai.types.moderation_multi_modal_input_param [assertion]
      early skip of rewriting module: openai.types.moderation_text_input_param [assertion]
      early skip of rewriting module: openai.types.moderation_image_url_input_param [assertion]
      early skip of rewriting module: openai.types.vector_store_list_params [assertion]
      early skip of rewriting module: openai.types.create_embedding_response [assertion]
      early skip of rewriting module: openai.types.moderation_create_response [assertion]
      early skip of rewriting module: openai.types.vector_store_create_params [assertion]
      early skip of rewriting module: openai.types.file_chunking_strategy_param [assertion]
      early skip of rewriting module: openai.types.auto_file_chunking_strategy_param [assertion]
      early skip of rewriting module: openai.types.static_file_chunking_strategy_object_param [assertion]
      early skip of rewriting module: openai.types.static_file_chunking_strategy_param [assertion]
      early skip of rewriting module: openai.types.vector_store_search_params [assertion]
      early skip of rewriting module: openai.types.vector_store_update_params [assertion]
      early skip of rewriting module: openai.types.vector_store_search_response [assertion]
      early skip of rewriting module: openai.types.websocket_connection_options [assertion]
      early skip of rewriting module: openai.types.image_create_variation_params [assertion]
      early skip of rewriting module: openai._client [assertion]
      early skip of rewriting module: openai._exceptions [assertion]
      early skip of rewriting module: openai._qs [assertion]
      early skip of rewriting module: openai._version [assertion]
      early skip of rewriting module: openai.resources [assertion]
      early skip of rewriting module: openai.resources.beta [assertion]
      early skip of rewriting module: openai.resources.beta.beta [assertion]
      early skip of rewriting module: openai.resources.beta.chat [assertion]
      early skip of rewriting module: openai.resources.beta.chat.chat [assertion]
      early skip of rewriting module: openai.resources.beta.chat.completions [assertion]
      early skip of rewriting module: openai._legacy_response [assertion]
      early skip of rewriting module: openai._streaming [assertion]
      early skip of rewriting module: openai._resource [assertion]
      early skip of rewriting module: openai._response [assertion]
      early skip of rewriting module: openai._base_client [assertion]
      early skip of rewriting module: distro [assertion]
      early skip of rewriting module: distro.distro [assertion]
      early skip of rewriting module: openai.lib [assertion]
      early skip of rewriting module: openai.lib._tools [assertion]
      early skip of rewriting module: openai.lib._pydantic [assertion]
      early skip of rewriting module: openai.types.responses [assertion]
      early skip of rewriting module: openai.types.responses.tool [assertion]
      early skip of rewriting module: openai.types.responses.computer_tool [assertion]
      early skip of rewriting module: openai.types.responses.function_tool [assertion]
      early skip of rewriting module: openai.types.responses.web_search_tool [assertion]
      early skip of rewriting module: openai.types.responses.file_search_tool [assertion]
      early skip of rewriting module: openai.types.responses.response [assertion]
      early skip of rewriting module: openai.types.responses.response_error [assertion]
      early skip of rewriting module: openai.types.responses.response_usage [assertion]
      early skip of rewriting module: openai.types.responses.response_status [assertion]
      early skip of rewriting module: openai.types.responses.tool_choice_types [assertion]
      early skip of rewriting module: openai.types.responses.tool_choice_options [assertion]
      early skip of rewriting module: openai.types.responses.response_output_item [assertion]
      early skip of rewriting module: openai.types.responses.response_output_message [assertion]
      early skip of rewriting module: openai.types.responses.response_output_text [assertion]
      early skip of rewriting module: openai.types.responses.response_output_refusal [assertion]
      early skip of rewriting module: openai.types.responses.response_reasoning_item [assertion]
      early skip of rewriting module: openai.types.responses.response_computer_tool_call [assertion]
      early skip of rewriting module: openai.types.responses.response_function_tool_call [assertion]
      early skip of rewriting module: openai.types.responses.response_function_web_search [assertion]
      early skip of rewriting module: openai.types.responses.response_file_search_tool_call [assertion]
      early skip of rewriting module: openai.types.responses.response_text_config [assertion]
      early skip of rewriting module: openai.types.responses.response_format_text_config [assertion]
      early skip of rewriting module: openai.types.responses.response_format_text_json_schema_config [assertion]
      early skip of rewriting module: openai.types.responses.tool_choice_function [assertion]
      early skip of rewriting module: openai.types.responses.tool_param [assertion]
      early skip of rewriting module: openai.types.responses.computer_tool_param [assertion]
      early skip of rewriting module: openai.types.responses.function_tool_param [assertion]
      early skip of rewriting module: openai.types.responses.web_search_tool_param [assertion]
      early skip of rewriting module: openai.types.responses.file_search_tool_param [assertion]
      early skip of rewriting module: openai.types.responses.response_item [assertion]
      early skip of rewriting module: openai.types.responses.response_input_message_item [assertion]
      early skip of rewriting module: openai.types.responses.response_input_message_content_list [assertion]
      early skip of rewriting module: openai.types.responses.response_input_content [assertion]
      early skip of rewriting module: openai.types.responses.response_input_file [assertion]
      early skip of rewriting module: openai.types.responses.response_input_text [assertion]
      early skip of rewriting module: openai.types.responses.response_input_image [assertion]
      early skip of rewriting module: openai.types.responses.response_function_tool_call_item [assertion]
      early skip of rewriting module: openai.types.responses.response_computer_tool_call_output_item [assertion]
      early skip of rewriting module: openai.types.responses.response_computer_tool_call_output_screenshot [assertion]
      early skip of rewriting module: openai.types.responses.response_function_tool_call_output_item [assertion]
      early skip of rewriting module: openai.types.responses.parsed_response [assertion]
      early skip of rewriting module: openai.types.responses.response_item_list [assertion]
      early skip of rewriting module: openai.types.responses.response_includable [assertion]
      early skip of rewriting module: openai.types.responses.response_error_event [assertion]
      early skip of rewriting module: openai.types.responses.response_input_param [assertion]
      early skip of rewriting module: openai.types.responses.easy_input_message_param [assertion]
      early skip of rewriting module: openai.types.responses.response_input_message_content_list_param [assertion]
      early skip of rewriting module: openai.types.responses.response_input_file_param [assertion]
      early skip of rewriting module: openai.types.responses.response_input_text_param [assertion]
      early skip of rewriting module: openai.types.responses.response_input_image_param [assertion]
      early skip of rewriting module: openai.types.responses.response_output_message_param [assertion]
      early skip of rewriting module: openai.types.responses.response_output_text_param [assertion]
      early skip of rewriting module: openai.types.responses.response_output_refusal_param [assertion]
      early skip of rewriting module: openai.types.responses.response_reasoning_item_param [assertion]
      early skip of rewriting module: openai.types.responses.response_computer_tool_call_param [assertion]
      early skip of rewriting module: openai.types.responses.response_function_tool_call_param [assertion]
      early skip of rewriting module: openai.types.responses.response_function_web_search_param [assertion]
      early skip of rewriting module: openai.types.responses.response_file_search_tool_call_param [assertion]
      early skip of rewriting module: openai.types.responses.response_computer_tool_call_output_screenshot_param [assertion]
      early skip of rewriting module: openai.types.responses.response_failed_event [assertion]
      early skip of rewriting module: openai.types.responses.response_stream_event [assertion]
      early skip of rewriting module: openai.types.responses.response_created_event [assertion]
      early skip of rewriting module: openai.types.responses.response_completed_event [assertion]
      early skip of rewriting module: openai.types.responses.response_text_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_audio_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_incomplete_event [assertion]
      early skip of rewriting module: openai.types.responses.response_text_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_audio_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_in_progress_event [assertion]
      early skip of rewriting module: openai.types.responses.response_refusal_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_refusal_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_output_item_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_content_part_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_output_item_added_event [assertion]
      early skip of rewriting module: openai.types.responses.response_content_part_added_event [assertion]
      early skip of rewriting module: openai.types.responses.response_audio_transcript_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_text_annotation_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_audio_transcript_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_web_search_call_completed_event [assertion]
      early skip of rewriting module: openai.types.responses.response_web_search_call_searching_event [assertion]
      early skip of rewriting module: openai.types.responses.response_file_search_call_completed_event [assertion]
      early skip of rewriting module: openai.types.responses.response_file_search_call_searching_event [assertion]
      early skip of rewriting module: openai.types.responses.response_web_search_call_in_progress_event [assertion]
      early skip of rewriting module: openai.types.responses.response_file_search_call_in_progress_event [assertion]
      early skip of rewriting module: openai.types.responses.response_function_call_arguments_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_function_call_arguments_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_code_interpreter_call_code_done_event [assertion]
      early skip of rewriting module: openai.types.responses.response_code_interpreter_call_completed_event [assertion]
      early skip of rewriting module: openai.types.responses.response_code_interpreter_tool_call [assertion]
      early skip of rewriting module: openai.types.responses.response_code_interpreter_call_code_delta_event [assertion]
      early skip of rewriting module: openai.types.responses.response_code_interpreter_call_in_progress_event [assertion]
      early skip of rewriting module: openai.types.responses.response_code_interpreter_call_interpreting_event [assertion]
      early skip of rewriting module: openai.types.responses.input_item_list_params [assertion]
      early skip of rewriting module: openai.types.responses.response_create_params [assertion]
      early skip of rewriting module: openai.types.responses.tool_choice_types_param [assertion]
      early skip of rewriting module: openai.types.responses.response_text_config_param [assertion]
      early skip of rewriting module: openai.types.responses.response_format_text_config_param [assertion]
      early skip of rewriting module: openai.types.responses.response_format_text_json_schema_config_param [assertion]
      early skip of rewriting module: openai.types.responses.tool_choice_function_param [assertion]
      early skip of rewriting module: openai.types.responses.response_retrieve_params [assertion]
      early skip of rewriting module: openai.types.responses.response_input_item_param [assertion]
      early skip of rewriting module: openai.types.responses.response_input_content_param [assertion]
      early skip of rewriting module: openai.lib._parsing [assertion]
      early skip of rewriting module: openai.lib._parsing._completions [assertion]
      early skip of rewriting module: openai.lib.streaming [assertion]
      early skip of rewriting module: openai.lib.streaming._assistants [assertion]
      early skip of rewriting module: openai.types.beta [assertion]
      early skip of rewriting module: openai.types.beta.thread [assertion]
      early skip of rewriting module: openai.types.beta.assistant [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool [assertion]
      early skip of rewriting module: openai.types.beta.function_tool [assertion]
      early skip of rewriting module: openai.types.beta.file_search_tool [assertion]
      early skip of rewriting module: openai.types.beta.code_interpreter_tool [assertion]
      early skip of rewriting module: openai.types.beta.assistant_response_format_option [assertion]
      early skip of rewriting module: openai.types.beta.thread_deleted [assertion]
      early skip of rewriting module: openai.types.beta.assistant_deleted [assertion]
      early skip of rewriting module: openai.types.beta.function_tool_param [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_param [assertion]
      early skip of rewriting module: openai.types.beta.file_search_tool_param [assertion]
      early skip of rewriting module: openai.types.beta.code_interpreter_tool_param [assertion]
      early skip of rewriting module: openai.types.beta.thread_create_params [assertion]
      early skip of rewriting module: openai.types.beta.threads [assertion]
      early skip of rewriting module: openai.types.beta.threads.run [assertion]
      early skip of rewriting module: openai.types.beta.threads.run_status [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_choice_option [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_choice [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_choice_function [assertion]
      early skip of rewriting module: openai.types.beta.threads.required_action_function_tool_call [assertion]
      early skip of rewriting module: openai.types.beta.threads.text [assertion]
      early skip of rewriting module: openai.types.beta.threads.annotation [assertion]
      early skip of rewriting module: openai.types.beta.threads.file_path_annotation [assertion]
      early skip of rewriting module: openai.types.beta.threads.file_citation_annotation [assertion]
      early skip of rewriting module: openai.types.beta.threads.message [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_content [assertion]
      early skip of rewriting module: openai.types.beta.threads.text_content_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.refusal_content_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_url_content_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_url [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_file_content_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_file [assertion]
      early skip of rewriting module: openai.types.beta.threads.text_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.annotation_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.file_path_delta_annotation [assertion]
      early skip of rewriting module: openai.types.beta.threads.file_citation_delta_annotation [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_content_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.text_delta_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.refusal_delta_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_url_delta_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_url_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_file_delta_block [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_file_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_url_param [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_deleted [assertion]
      early skip of rewriting module: openai.types.beta.threads.run_list_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_file_param [assertion]
      early skip of rewriting module: openai.types.beta.threads.run_create_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.run_step [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.tool_calls_step_details [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.tool_call [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.function_tool_call [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.file_search_tool_call [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.code_interpreter_tool_call [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.message_creation_step_details [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.run_step_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.tool_call_delta_object [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.tool_call_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.function_tool_call_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.file_search_tool_call_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.code_interpreter_tool_call_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.code_interpreter_logs [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.code_interpreter_output_image [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.run_step_delta_message_delta [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.run_step_include [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.step_list_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.run_step_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.threads.runs.step_retrieve_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_content_part_param [assertion]
      early skip of rewriting module: openai.types.beta.threads.text_content_block_param [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_url_content_block_param [assertion]
      early skip of rewriting module: openai.types.beta.threads.image_file_content_block_param [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_choice_option_param [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_choice_param [assertion]
      early skip of rewriting module: openai.types.beta.assistant_tool_choice_function_param [assertion]
      early skip of rewriting module: openai.types.beta.assistant_response_format_option_param [assertion]
      early skip of rewriting module: openai.types.beta.threads.run_update_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_list_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_create_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.message_update_params [assertion]
      early skip of rewriting module: openai.types.beta.threads.run_submit_tool_outputs_params [assertion]
      early skip of rewriting module: openai.types.beta.thread_update_params [assertion]
      early skip of rewriting module: openai.types.beta.assistant_list_params [assertion]
      early skip of rewriting module: openai.types.beta.assistant_stream_event [assertion]
      early skip of rewriting module: openai.types.beta.assistant_create_params [assertion]
      early skip of rewriting module: openai.types.beta.assistant_update_params [assertion]
      early skip of rewriting module: openai.types.beta.thread_create_and_run_params [assertion]
      early skip of rewriting module: openai.lib.streaming.chat [assertion]
      early skip of rewriting module: openai.lib.streaming.chat._types [assertion]
      early skip of rewriting module: openai.lib.streaming.chat._events [assertion]
      early skip of rewriting module: openai.lib.streaming.chat._completions [assertion]
      early skip of rewriting module: jiter [assertion]
      early skip of rewriting module: jiter.jiter [assertion]
      early skip of rewriting module: openai.lib.streaming._deltas [assertion]
      early skip of rewriting module: openai.resources.beta.assistants [assertion]
      early skip of rewriting module: openai.pagination [assertion]
      early skip of rewriting module: openai.resources.beta.threads [assertion]
      early skip of rewriting module: openai.resources.beta.threads.runs [assertion]
      early skip of rewriting module: openai.resources.beta.threads.runs.runs [assertion]
      early skip of rewriting module: openai.resources.beta.threads.runs.steps [assertion]
      early skip of rewriting module: openai.resources.beta.threads.threads [assertion]
      early skip of rewriting module: openai.resources.beta.threads.messages [assertion]
      early skip of rewriting module: openai.resources.beta.realtime [assertion]
      early skip of rewriting module: openai.resources.beta.realtime.realtime [assertion]
      early skip of rewriting module: openai.resources.beta.realtime.sessions [assertion]
      early skip of rewriting module: openai.types.beta.realtime [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session [assertion]
      early skip of rewriting module: openai.types.beta.realtime.error_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_content [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_response [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_response_usage [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_response_status [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session_update_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_client_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_cancel_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_create_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_with_reference [assertion]
      early skip of rewriting module: openai.types.beta.realtime.transcription_session_update [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_create_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_delete_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_clear_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_append_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_commit_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_retrieve_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_truncate_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_server_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session_created_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session_updated_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_created_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_text_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.rate_limits_updated_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_audio_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_text_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_created_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_audio_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_created_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_deleted_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_output_item_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_cleared_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_content_part_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_output_item_added_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_truncated_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_content_part_added_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_committed_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.transcription_session_updated_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.transcription_session [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_audio_transcript_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_audio_transcript_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_speech_started_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_speech_stopped_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_function_call_arguments_done_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_function_call_arguments_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_input_audio_transcription_delta_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_input_audio_transcription_failed_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_input_audio_transcription_completed_event [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session_create_params [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_content_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_connect_params [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session_create_response [assertion]
      early skip of rewriting module: openai.types.beta.realtime.session_update_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.realtime_client_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_cancel_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.response_create_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_with_reference_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.transcription_session_update_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_create_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_delete_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_clear_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_append_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.input_audio_buffer_commit_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_retrieve_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.conversation_item_truncate_event_param [assertion]
      early skip of rewriting module: openai.types.beta.realtime.transcription_session_create_params [assertion]
      early skip of rewriting module: openai.resources.beta.realtime.transcription_sessions [assertion]
      early skip of rewriting module: openai.resources.chat [assertion]
      early skip of rewriting module: openai.resources.chat.chat [assertion]
      early skip of rewriting module: openai.resources.chat.completions [assertion]
      early skip of rewriting module: openai.resources.chat.completions.messages [assertion]
      early skip of rewriting module: openai.types.chat.completions [assertion]
      early skip of rewriting module: openai.types.chat.completions.message_list_params [assertion]
      early skip of rewriting module: openai.resources.chat.completions.completions [assertion]
      early skip of rewriting module: openai.resources.audio [assertion]
      early skip of rewriting module: openai.resources.audio.audio [assertion]
      early skip of rewriting module: openai.resources.audio.speech [assertion]
      early skip of rewriting module: openai.types.audio [assertion]
      early skip of rewriting module: openai.types.audio.translation [assertion]
      early skip of rewriting module: openai.types.audio.speech_model [assertion]
      early skip of rewriting module: openai.types.audio.transcription [assertion]
      early skip of rewriting module: openai.types.audio.transcription_word [assertion]
      early skip of rewriting module: openai.types.audio.translation_verbose [assertion]
      early skip of rewriting module: openai.types.audio.transcription_segment [assertion]
      early skip of rewriting module: openai.types.audio.speech_create_params [assertion]
      early skip of rewriting module: openai.types.audio.transcription_include [assertion]
      early skip of rewriting module: openai.types.audio.transcription_verbose [assertion]
      early skip of rewriting module: openai.types.audio.translation_create_params [assertion]
      early skip of rewriting module: openai.types.audio.transcription_stream_event [assertion]
      early skip of rewriting module: openai.types.audio.transcription_text_done_event [assertion]
      early skip of rewriting module: openai.types.audio.transcription_text_delta_event [assertion]
      early skip of rewriting module: openai.types.audio.transcription_create_params [assertion]
      early skip of rewriting module: openai.types.audio.translation_create_response [assertion]
      early skip of rewriting module: openai.types.audio.transcription_create_response [assertion]
      early skip of rewriting module: openai.resources.audio.translations [assertion]
      early skip of rewriting module: openai.resources.audio.transcriptions [assertion]
      early skip of rewriting module: openai.resources.evals [assertion]
      early skip of rewriting module: openai.resources.evals.runs [assertion]
      early skip of rewriting module: openai.resources.evals.runs.runs [assertion]
      early skip of rewriting module: openai.resources.evals.runs.output_items [assertion]
      early skip of rewriting module: openai.types.evals [assertion]
      early skip of rewriting module: openai.types.evals.eval_api_error [assertion]
      early skip of rewriting module: openai.types.evals.run_list_params [assertion]
      early skip of rewriting module: openai.types.evals.run_create_params [assertion]
      early skip of rewriting module: openai.types.evals.create_eval_jsonl_run_data_source_param [assertion]
      early skip of rewriting module: openai.types.evals.create_eval_completions_run_data_source_param [assertion]
      early skip of rewriting module: openai.types.evals.run_list_response [assertion]
      early skip of rewriting module: openai.types.evals.create_eval_jsonl_run_data_source [assertion]
      early skip of rewriting module: openai.types.evals.create_eval_completions_run_data_source [assertion]
      early skip of rewriting module: openai.types.evals.run_cancel_response [assertion]
      early skip of rewriting module: openai.types.evals.run_create_response [assertion]
      early skip of rewriting module: openai.types.evals.run_delete_response [assertion]
      early skip of rewriting module: openai.types.evals.run_retrieve_response [assertion]
      early skip of rewriting module: openai.types.evals.runs [assertion]
      early skip of rewriting module: openai.types.evals.runs.output_item_list_params [assertion]
      early skip of rewriting module: openai.types.evals.runs.output_item_list_response [assertion]
      early skip of rewriting module: openai.types.evals.runs.output_item_retrieve_response [assertion]
      early skip of rewriting module: openai.resources.evals.evals [assertion]
      early skip of rewriting module: openai.resources.files [assertion]
      early skip of rewriting module: openai.resources.images [assertion]
      early skip of rewriting module: openai.resources.models [assertion]
      early skip of rewriting module: openai.resources.batches [assertion]
      early skip of rewriting module: openai.resources.uploads [assertion]
      early skip of rewriting module: openai.resources.uploads.parts [assertion]
      early skip of rewriting module: openai.types.uploads [assertion]
      early skip of rewriting module: openai.types.uploads.upload_part [assertion]
      early skip of rewriting module: openai.types.uploads.part_create_params [assertion]
      early skip of rewriting module: openai.resources.uploads.uploads [assertion]
      early skip of rewriting module: openai.resources.responses [assertion]
      early skip of rewriting module: openai.resources.responses.responses [assertion]
      early skip of rewriting module: openai.resources.responses.input_items [assertion]
      early skip of rewriting module: openai.lib._parsing._responses [assertion]
      early skip of rewriting module: openai.lib.streaming.responses [assertion]
      early skip of rewriting module: openai.lib.streaming.responses._events [assertion]
      early skip of rewriting module: openai.lib.streaming.responses._responses [assertion]
      early skip of rewriting module: openai.lib.streaming.responses._types [assertion]
      early skip of rewriting module: openai.resources.embeddings [assertion]
      early skip of rewriting module: openai._extras [assertion]
      early skip of rewriting module: openai._extras.numpy_proxy [assertion]
      early skip of rewriting module: openai._extras._common [assertion]
      early skip of rewriting module: openai._extras.pandas_proxy [assertion]
      early skip of rewriting module: openai._extras.sounddevice_proxy [assertion]
      early skip of rewriting module: openai.resources.completions [assertion]
      early skip of rewriting module: openai.resources.fine_tuning [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.jobs [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.jobs.jobs [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.jobs.checkpoints [assertion]
      early skip of rewriting module: openai.types.fine_tuning [assertion]
      early skip of rewriting module: openai.types.fine_tuning.fine_tuning_job [assertion]
      early skip of rewriting module: openai.types.fine_tuning.fine_tuning_job_wandb_integration_object [assertion]
      early skip of rewriting module: openai.types.fine_tuning.fine_tuning_job_wandb_integration [assertion]
      early skip of rewriting module: openai.types.fine_tuning.job_list_params [assertion]
      early skip of rewriting module: openai.types.fine_tuning.job_create_params [assertion]
      early skip of rewriting module: openai.types.fine_tuning.fine_tuning_job_event [assertion]
      early skip of rewriting module: openai.types.fine_tuning.job_list_events_params [assertion]
      early skip of rewriting module: openai.types.fine_tuning.fine_tuning_job_integration [assertion]
      early skip of rewriting module: openai.types.fine_tuning.jobs [assertion]
      early skip of rewriting module: openai.types.fine_tuning.jobs.checkpoint_list_params [assertion]
      early skip of rewriting module: openai.types.fine_tuning.jobs.fine_tuning_job_checkpoint [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.checkpoints [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.checkpoints.checkpoints [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.checkpoints.permissions [assertion]
      early skip of rewriting module: openai.types.fine_tuning.checkpoints [assertion]
      early skip of rewriting module: openai.types.fine_tuning.checkpoints.permission_create_params [assertion]
      early skip of rewriting module: openai.types.fine_tuning.checkpoints.permission_create_response [assertion]
      early skip of rewriting module: openai.types.fine_tuning.checkpoints.permission_delete_response [assertion]
      early skip of rewriting module: openai.types.fine_tuning.checkpoints.permission_retrieve_params [assertion]
      early skip of rewriting module: openai.types.fine_tuning.checkpoints.permission_retrieve_response [assertion]
      early skip of rewriting module: openai.resources.fine_tuning.fine_tuning [assertion]
      early skip of rewriting module: openai.resources.moderations [assertion]
      early skip of rewriting module: openai.resources.vector_stores [assertion]
      early skip of rewriting module: openai.resources.vector_stores.files [assertion]
      early skip of rewriting module: openai.types.vector_stores [assertion]
      early skip of rewriting module: openai.types.vector_stores.file_list_params [assertion]
      early skip of rewriting module: openai.types.vector_stores.vector_store_file [assertion]
      early skip of rewriting module: openai.types.vector_stores.file_create_params [assertion]
      early skip of rewriting module: openai.types.vector_stores.file_update_params [assertion]
      early skip of rewriting module: openai.types.vector_stores.file_content_response [assertion]
      early skip of rewriting module: openai.types.vector_stores.vector_store_file_batch [assertion]
      early skip of rewriting module: openai.types.vector_stores.file_batch_create_params [assertion]
      early skip of rewriting module: openai.types.vector_stores.vector_store_file_deleted [assertion]
      early skip of rewriting module: openai.types.vector_stores.file_batch_list_files_params [assertion]
      early skip of rewriting module: openai.resources.vector_stores.file_batches [assertion]
      early skip of rewriting module: concurrent.futures.thread [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: openai.resources.vector_stores.vector_stores [assertion]
      early skip of rewriting module: openai.lib.azure [assertion]
      early skip of rewriting module: openai.version [assertion]
      early skip of rewriting module: openai.lib._old_api [assertion]
      early skip of rewriting module: openai._module_client [assertion]
      early skip of rewriting module: dotenv [assertion]
      early skip of rewriting module: dotenv.main [assertion]
      early skip of rewriting module: dotenv.parser [assertion]
      early skip of rewriting module: dotenv.variables [assertion]
      early skip of rewriting module: core.nlp_utils [assertion]
      early skip of rewriting module: spacy [assertion]
      early skip of rewriting module: spacy.errors [assertion]
      early skip of rewriting module: spacy.compat [assertion]
      early skip of rewriting module: thinc [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy._utils [assertion]
      early skip of rewriting module: numpy._utils._convertions [assertion]
      early skip of rewriting module: numpy._expired_attrs_2_0 [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: numpy._distributor_init_local [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy._core [assertion]
      early skip of rewriting module: numpy._core.multiarray [assertion]
      early skip of rewriting module: numpy._core.overrides [assertion]
      early skip of rewriting module: numpy._utils._inspect [assertion]
      early skip of rewriting module: numpy._core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.exceptions [assertion]
      early skip of rewriting module: numpy._core._exceptions [assertion]
      early skip of rewriting module: numpy._core.printoptions [assertion]
      early skip of rewriting module: numpy.dtypes [assertion]
      early skip of rewriting module: numpy._core.umath [assertion]
      early skip of rewriting module: numpy._core.numerictypes [assertion]
      early skip of rewriting module: numpy._core._string_helpers [assertion]
      early skip of rewriting module: numpy._core._type_aliases [assertion]
      early skip of rewriting module: numpy._core._dtype [assertion]
      early skip of rewriting module: numpy._core.numeric [assertion]
      early skip of rewriting module: numpy._core.shape_base [assertion]
      early skip of rewriting module: numpy._core.fromnumeric [assertion]
      early skip of rewriting module: numpy._core._methods [assertion]
      early skip of rewriting module: numpy._core._ufunc_config [assertion]
      early skip of rewriting module: numpy._core.arrayprint [assertion]
      early skip of rewriting module: numpy._core._asarray [assertion]
      early skip of rewriting module: numpy._core.records [assertion]
      early skip of rewriting module: numpy._core.memmap [assertion]
      early skip of rewriting module: numpy._core.function_base [assertion]
      early skip of rewriting module: numpy._core._machar [assertion]
      early skip of rewriting module: numpy._core.getlimits [assertion]
      early skip of rewriting module: numpy._core.einsumfunc [assertion]
      early skip of rewriting module: numpy._core._add_newdocs [assertion]
      early skip of rewriting module: numpy._core._add_newdocs_scalars [assertion]
      early skip of rewriting module: numpy._core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy._core._internal [assertion]
      early skip of rewriting module: ctypes [assertion]
      early skip of rewriting module: _ctypes [assertion]
      early skip of rewriting module: ctypes._endian [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib.array_utils [assertion]
      early skip of rewriting module: numpy.lib._array_utils_impl [assertion]
      early skip of rewriting module: numpy.lib.introspect [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib._npyio_impl [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._utils_impl [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib._scimath_impl [assertion]
      early skip of rewriting module: numpy.lib._type_check_impl [assertion]
      early skip of rewriting module: numpy.lib._ufunclike_impl [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib._stride_tricks_impl [assertion]
      early skip of rewriting module: numpy.lib._index_tricks_impl [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.linalg._linalg [assertion]
      early skip of rewriting module: numpy.lib._twodim_base_impl [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy._typing [assertion]
      early skip of rewriting module: numpy._typing._nested_sequence [assertion]
      early skip of rewriting module: numpy._typing._nbit_base [assertion]
      early skip of rewriting module: numpy._typing._nbit [assertion]
      early skip of rewriting module: numpy._typing._char_codes [assertion]
      early skip of rewriting module: numpy._typing._scalars [assertion]
      early skip of rewriting module: numpy._typing._shape [assertion]
      early skip of rewriting module: numpy._typing._dtype_like [assertion]
      early skip of rewriting module: numpy._typing._array_like [assertion]
      early skip of rewriting module: numpy._typing._ufunc [assertion]
      early skip of rewriting module: numpy.lib._function_base_impl [assertion]
      early skip of rewriting module: numpy.lib._histograms_impl [assertion]
      early skip of rewriting module: numpy.lib._nanfunctions_impl [assertion]
      early skip of rewriting module: numpy.lib._shape_base_impl [assertion]
      early skip of rewriting module: numpy.lib._arraysetops_impl [assertion]
      early skip of rewriting module: numpy.lib._polynomial_impl [assertion]
      early skip of rewriting module: numpy.lib._arrayterator_impl [assertion]
      early skip of rewriting module: numpy.lib._arraypad_impl [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy._array_api_info [assertion]
      early skip of rewriting module: thinc.about [assertion]
      early skip of rewriting module: thinc.config [assertion]
      early skip of rewriting module: catalogue [assertion]
      early skip of rewriting module: confection [assertion]
      early skip of rewriting module: srsly [assertion]
      early skip of rewriting module: srsly._json_api [assertion]
      early skip of rewriting module: srsly.ujson [assertion]
      early skip of rewriting module: srsly.ujson.ujson [assertion]
      early skip of rewriting module: srsly.util [assertion]
      early skip of rewriting module: srsly._msgpack_api [assertion]
      early skip of rewriting module: srsly.msgpack [assertion]
      early skip of rewriting module: srsly.msgpack._epoch [assertion]
      early skip of rewriting module: srsly.msgpack.datetime [assertion]
      early skip of rewriting module: srsly.msgpack._version [assertion]
      early skip of rewriting module: srsly.msgpack.exceptions [assertion]
      early skip of rewriting module: srsly.msgpack._packer [assertion]
      early skip of rewriting module: srsly.msgpack.ext [assertion]
      early skip of rewriting module: srsly.msgpack.util [assertion]
      early skip of rewriting module: srsly.msgpack._unpacker [assertion]
      early skip of rewriting module: srsly.msgpack._msgpack_numpy [assertion]
      early skip of rewriting module: cupy [assertion]
      early skip of rewriting module: srsly._pickle_api [assertion]
      early skip of rewriting module: srsly.cloudpickle [assertion]
      early skip of rewriting module: srsly.cloudpickle.cloudpickle [assertion]
      early skip of rewriting module: srsly.cloudpickle.compat [assertion]
      early skip of rewriting module: srsly.cloudpickle.cloudpickle_fast [assertion]
      early skip of rewriting module: srsly._yaml_api [assertion]
      early skip of rewriting module: srsly.ruamel_yaml [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.main [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.resolver [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.compat [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.error [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.nodes [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.util [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.emitter [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.events [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.representer [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.scalarstring [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.anchor [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.scalarint [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.scalarfloat [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.scalarbool [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.timestamp [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.comments [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.parser [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.tokens [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.scanner [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.composer [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.constructor [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.serializer [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.loader [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.reader [assertion]
      early skip of rewriting module: srsly.ruamel_yaml.dumper [assertion]
      early skip of rewriting module: _ruamel_yaml [assertion]
      early skip of rewriting module: srsly.about [assertion]
      early skip of rewriting module: confection.util [assertion]
      early skip of rewriting module: thinc.types [assertion]
      early skip of rewriting module: thinc.compat [assertion]
      early skip of rewriting module: cupy [assertion]
      early skip of rewriting module: torch [assertion]
      early skip of rewriting module: h5py [assertion]
      early skip of rewriting module: os_signpost [assertion]
      early skip of rewriting module: thinc.util [assertion]
      early skip of rewriting module: wasabi [assertion]
      early skip of rewriting module: wasabi.markdown [assertion]
      early skip of rewriting module: wasabi.compat [assertion]
      early skip of rewriting module: wasabi.printer [assertion]
      early skip of rewriting module: wasabi.tables [assertion]
      early skip of rewriting module: wasabi.util [assertion]
      early skip of rewriting module: wasabi.traceback_printer [assertion]
      early skip of rewriting module: colorama [assertion]
      early skip of rewriting module: cPickle [assertion]
      early skip of rewriting module: copy_reg [assertion]
      early skip of rewriting module: cupy [assertion]
      early skip of rewriting module: cupy [assertion]
      early skip of rewriting module: thinc.api [assertion]
      early skip of rewriting module: thinc.backends [assertion]
      early skip of rewriting module: thinc.backends._cupy_allocators [assertion]
      early skip of rewriting module: thinc.backends._param_server [assertion]
      early skip of rewriting module: thinc.backends.cupy_ops [assertion]
      early skip of rewriting module: thinc.backends._custom_kernels [assertion]
      early skip of rewriting module: thinc.backends.numpy_ops [assertion]
      early skip of rewriting module: thinc.backends.cblas [assertion]
      early skip of rewriting module: blis [assertion]
      early skip of rewriting module: blis.cy [assertion]
      early skip of rewriting module: blis.atexit [assertion]
      early skip of rewriting module: cymem [assertion]
      early skip of rewriting module: cymem.about [assertion]
      early skip of rewriting module: cymem.cymem [assertion]
      early skip of rewriting module: cymem.warnings [assertion]
      early skip of rewriting module: preshed [assertion]
      early skip of rewriting module: preshed.about [assertion]
      early skip of rewriting module: preshed.maps [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: thinc.backends.linalg [assertion]
      early skip of rewriting module: thinc.backends.blis [assertion]
      early skip of rewriting module: blis.py [assertion]
      early skip of rewriting module: blis.numpy [assertion]
      early skip of rewriting module: murmurhash [assertion]
      early skip of rewriting module: murmurhash.about [assertion]
      early skip of rewriting module: murmurhash.mrmr [assertion]
      early skip of rewriting module: thinc.backends.collections [assertion]
      early skip of rewriting module: thinc.backends.typing [assertion]
      early skip of rewriting module: thinc.backends.numpy [assertion]
      early skip of rewriting module: thinc.backends.ops [assertion]
      early skip of rewriting module: thinc.backends.blis [assertion]
      early skip of rewriting module: thinc.backends.mps_ops [assertion]
      early skip of rewriting module: thinc_apple_ops [assertion]
      early skip of rewriting module: thinc.initializers [assertion]
      early skip of rewriting module: thinc.layers [assertion]
      early skip of rewriting module: thinc.layers.add [assertion]
      early skip of rewriting module: thinc.model [assertion]
      early skip of rewriting module: thinc.optimizers [assertion]
      early skip of rewriting module: thinc.shims [assertion]
      early skip of rewriting module: thinc.shims.mxnet [assertion]
      early skip of rewriting module: thinc.shims.shim [assertion]
      early skip of rewriting module: thinc.shims.pytorch [assertion]
      early skip of rewriting module: thinc.shims.pytorch_grad_scaler [assertion]
      early skip of rewriting module: thinc.shims.tensorflow [assertion]
      early skip of rewriting module: thinc.shims.torchscript [assertion]
      early skip of rewriting module: thinc.layers.array_getitem [assertion]
      early skip of rewriting module: thinc.layers.bidirectional [assertion]
      early skip of rewriting module: thinc.layers.cauchysimilarity [assertion]
      early skip of rewriting module: thinc.layers.chain [assertion]
      early skip of rewriting module: thinc.layers.clipped_linear [assertion]
      early skip of rewriting module: thinc.layers.dropout [assertion]
      early skip of rewriting module: thinc.layers.layernorm [assertion]
      early skip of rewriting module: thinc.layers.clone [assertion]
      early skip of rewriting module: thinc.layers.noop [assertion]
      early skip of rewriting module: thinc.layers.concatenate [assertion]
      early skip of rewriting module: thinc.layers.dish [assertion]
      early skip of rewriting module: thinc.layers.embed [assertion]
      early skip of rewriting module: thinc.layers.expand_window [assertion]
      early skip of rewriting module: thinc.layers.gelu [assertion]
      early skip of rewriting module: thinc.layers.hard_swish [assertion]
      early skip of rewriting module: thinc.layers.hard_swish_mobilenet [assertion]
      early skip of rewriting module: thinc.layers.hashembed [assertion]
      early skip of rewriting module: thinc.layers.linear [assertion]
      early skip of rewriting module: thinc.layers.list2array [assertion]
      early skip of rewriting module: thinc.layers.list2padded [assertion]
      early skip of rewriting module: thinc.layers.list2ragged [assertion]
      early skip of rewriting module: thinc.layers.logistic [assertion]
      early skip of rewriting module: thinc.layers.lstm [assertion]
      early skip of rewriting module: thinc.layers.map_list [assertion]
      early skip of rewriting module: thinc.layers.maxout [assertion]
      early skip of rewriting module: thinc.layers.mish [assertion]
      early skip of rewriting module: thinc.layers.multisoftmax [assertion]
      early skip of rewriting module: thinc.layers.mxnetwrapper [assertion]
      early skip of rewriting module: thinc.layers.padded2list [assertion]
      early skip of rewriting module: thinc.layers.parametricattention [assertion]
      early skip of rewriting module: thinc.layers.parametricattention_v2 [assertion]
      early skip of rewriting module: thinc.layers.premap_ids [assertion]
      early skip of rewriting module: thinc.layers.numpy [assertion]
      early skip of rewriting module: thinc.layers.typing [assertion]
      early skip of rewriting module: thinc.layers.pytorchwrapper [assertion]
      early skip of rewriting module: thinc.layers.ragged2list [assertion]
      early skip of rewriting module: thinc.layers.reduce_first [assertion]
      early skip of rewriting module: thinc.layers.reduce_last [assertion]
      early skip of rewriting module: thinc.layers.reduce_max [assertion]
      early skip of rewriting module: thinc.layers.reduce_mean [assertion]
      early skip of rewriting module: thinc.layers.reduce_sum [assertion]
      early skip of rewriting module: thinc.layers.relu [assertion]
      early skip of rewriting module: thinc.layers.remap_ids [assertion]
      early skip of rewriting module: thinc.layers.residual [assertion]
      early skip of rewriting module: thinc.layers.resizable [assertion]
      early skip of rewriting module: thinc.layers.siamese [assertion]
      early skip of rewriting module: thinc.layers.sigmoid [assertion]
      early skip of rewriting module: thinc.layers.sigmoid_activation [assertion]
      early skip of rewriting module: thinc.layers.softmax [assertion]
      early skip of rewriting module: thinc.layers.softmax_activation [assertion]
      early skip of rewriting module: thinc.layers.sparselinear [assertion]
      early skip of rewriting module: thinc.layers.typing [assertion]
      early skip of rewriting module: thinc.layers.strings2arrays [assertion]
      early skip of rewriting module: thinc.layers.swish [assertion]
      early skip of rewriting module: thinc.layers.tensorflowwrapper [assertion]
      early skip of rewriting module: thinc.layers.torchscriptwrapper [assertion]
      early skip of rewriting module: thinc.layers.tuplify [assertion]
      early skip of rewriting module: thinc.layers.uniqued [assertion]
      early skip of rewriting module: thinc.layers.with_array [assertion]
      early skip of rewriting module: thinc.layers.with_array2d [assertion]
      early skip of rewriting module: thinc.layers.with_cpu [assertion]
      early skip of rewriting module: thinc.layers.with_debug [assertion]
      early skip of rewriting module: thinc.layers.with_flatten [assertion]
      early skip of rewriting module: thinc.layers.with_flatten_v2 [assertion]
      early skip of rewriting module: thinc.layers.with_getitem [assertion]
      early skip of rewriting module: thinc.layers.with_list [assertion]
      early skip of rewriting module: thinc.layers.with_nvtx_range [assertion]
      early skip of rewriting module: thinc.layers.with_padded [assertion]
      early skip of rewriting module: thinc.layers.with_ragged [assertion]
      early skip of rewriting module: thinc.layers.with_reshape [assertion]
      early skip of rewriting module: thinc.layers.with_signpost_interval [assertion]
      early skip of rewriting module: thinc.loss [assertion]
      early skip of rewriting module: thinc.schedules [assertion]
      early skip of rewriting module: spacy.pipeline [assertion]
      early skip of rewriting module: spacy.pipeline.attributeruler [assertion]
      early skip of rewriting module: spacy.util [assertion]
      early skip of rewriting module: pkgutil [assertion]
      early skip of rewriting module: langcodes [assertion]
      early skip of rewriting module: langcodes.tag_parser [assertion]
      early skip of rewriting module: langcodes.language_distance [assertion]
      early skip of rewriting module: langcodes.data_dicts [assertion]
      early skip of rewriting module: packaging.requirements [assertion]
      early skip of rewriting module: packaging._parser [assertion]
      early skip of rewriting module: packaging._tokenizer [assertion]
      early skip of rewriting module: packaging.specifiers [assertion]
      early skip of rewriting module: packaging.utils [assertion]
      early skip of rewriting module: packaging.tags [assertion]
      early skip of rewriting module: packaging._manylinux [assertion]
      early skip of rewriting module: packaging._elffile [assertion]
      early skip of rewriting module: packaging._musllinux [assertion]
      early skip of rewriting module: packaging.markers [assertion]
      early skip of rewriting module: cupy [assertion]
      early skip of rewriting module: spacy.about [assertion]
      early skip of rewriting module: spacy.symbols [assertion]
      early skip of rewriting module: spacy.language [assertion]
      early skip of rewriting module: timeit [assertion]
      early skip of rewriting module: spacy.ty [assertion]
      early skip of rewriting module: spacy.git_info [assertion]
      early skip of rewriting module: spacy.lang [assertion]
      early skip of rewriting module: spacy.lang.punctuation [assertion]
      early skip of rewriting module: spacy.lang.char_classes [assertion]
      early skip of rewriting module: spacy.lang.tokenizer_exceptions [assertion]
      early skip of rewriting module: spacy.lookups [assertion]
      early skip of rewriting module: preshed.bloom [assertion]
      early skip of rewriting module: preshed.math [assertion]
      early skip of rewriting module: preshed.array [assertion]
      early skip of rewriting module: preshed.copy_reg [assertion]
      early skip of rewriting module: copy_reg [assertion]
      early skip of rewriting module: copy_reg [assertion]
      early skip of rewriting module: preshed.copyreg [assertion]
      early skip of rewriting module: spacy.strings [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.contextlib [assertion]
      early skip of rewriting module: spacy.typing [assertion]
      early skip of rewriting module: spacy.srsly [assertion]
      early skip of rewriting module: spacy.pipe_analysis [assertion]
      early skip of rewriting module: spacy.tokens [assertion]
      early skip of rewriting module: spacy.tokens._serialize [assertion]
      early skip of rewriting module: spacy.attrs [assertion]
      early skip of rewriting module: spacy.vocab [assertion]
      early skip of rewriting module: spacy.morphology [assertion]
      early skip of rewriting module: spacy.warnings [assertion]
      early skip of rewriting module: spacy.numpy [assertion]
      early skip of rewriting module: spacy.parts_of_speech [assertion]
      early skip of rewriting module: spacy.collections [assertion]
      early skip of rewriting module: spacy.enum [assertion]
      early skip of rewriting module: spacy.lexeme [assertion]
      early skip of rewriting module: spacy.warnings [assertion]
      early skip of rewriting module: spacy.numpy [assertion]
      early skip of rewriting module: spacy.thinc [assertion]
      early skip of rewriting module: spacy.tokens.doc [assertion]
      early skip of rewriting module: spacy.tokens.span [assertion]
      early skip of rewriting module: spacy.tokens.token [assertion]
      early skip of rewriting module: spacy.tokens.morphanalysis [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.tokens.warnings [assertion]
      early skip of rewriting module: spacy.tokens.thinc [assertion]
      early skip of rewriting module: spacy.tokens.underscore [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.tokens.copy [assertion]
      early skip of rewriting module: spacy.tokens.warnings [assertion]
      early skip of rewriting module: spacy.tokens.numpy [assertion]
      early skip of rewriting module: spacy.tokens.thinc [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.tokens.typing [assertion]
      early skip of rewriting module: spacy.tokens.copy [assertion]
      early skip of rewriting module: spacy.tokens.itertools [assertion]
      early skip of rewriting module: spacy.tokens.warnings [assertion]
      early skip of rewriting module: spacy.tokens.collections [assertion]
      early skip of rewriting module: spacy.tokens.enum [assertion]
      early skip of rewriting module: spacy.tokens.numpy [assertion]
      early skip of rewriting module: spacy.tokens.srsly [assertion]
      early skip of rewriting module: spacy.tokens.thinc [assertion]
      early skip of rewriting module: spacy.tokens.thinc [assertion]
      early skip of rewriting module: spacy.tokens._dict_proxies [assertion]
      early skip of rewriting module: spacy.tokens.span_group [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.tokens.struct [assertion]
      early skip of rewriting module: spacy.tokens.weakref [assertion]
      early skip of rewriting module: spacy.tokens.copy [assertion]
      early skip of rewriting module: spacy.tokens.typing [assertion]
      early skip of rewriting module: spacy.tokens.srsly [assertion]
      early skip of rewriting module: spacy.tokens.spacy [assertion]
      early skip of rewriting module: spacy.schemas [assertion]
      early skip of rewriting module: spacy.tokens._retokenize [assertion]
      early skip of rewriting module: spacy.tokens.numpy [assertion]
      early skip of rewriting module: spacy.tokens.thinc [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.functools [assertion]
      early skip of rewriting module: spacy.contextlib [assertion]
      early skip of rewriting module: spacy.typing [assertion]
      early skip of rewriting module: spacy.numpy [assertion]
      early skip of rewriting module: spacy.srsly [assertion]
      early skip of rewriting module: spacy.thinc [assertion]
      early skip of rewriting module: spacy.lang.lex_attrs [assertion]
      early skip of rewriting module: spacy.lang.norm_exceptions [assertion]
      early skip of rewriting module: spacy.vectors [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.typing [assertion]
      early skip of rewriting module: spacy.warnings [assertion]
      early skip of rewriting module: spacy.enum [assertion]
      early skip of rewriting module: spacy.pathlib [assertion]
      early skip of rewriting module: spacy.typing [assertion]
      early skip of rewriting module: spacy.numpy [assertion]
      early skip of rewriting module: spacy.srsly [assertion]
      early skip of rewriting module: spacy.thinc [assertion]
      early skip of rewriting module: spacy.thinc [assertion]
      early skip of rewriting module: spacy.thinc [assertion]
      early skip of rewriting module: spacy.scorer [assertion]
      early skip of rewriting module: spacy.training [assertion]
      early skip of rewriting module: spacy.training.alignment [assertion]
      early skip of rewriting module: spacy.training.align [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.training.re [assertion]
      early skip of rewriting module: spacy.training.itertools [assertion]
      early skip of rewriting module: spacy.training.typing [assertion]
      early skip of rewriting module: spacy.training.alignment_array [assertion]
      early skip of rewriting module: spacy.training.typing [assertion]
      early skip of rewriting module: spacy.training.numpy [assertion]
      early skip of rewriting module: spacy.training.augment [assertion]
      early skip of rewriting module: spacy.training.example [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.training.collections [assertion]
      early skip of rewriting module: spacy.training.numpy [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.nonproj [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.copy [assertion]
      early skip of rewriting module: spacy.training.iob_utils [assertion]
      early skip of rewriting module: spacy.training.batchers [assertion]
      early skip of rewriting module: spacy.training.callbacks [assertion]
      early skip of rewriting module: spacy.training.corpus [assertion]
      early skip of rewriting module: spacy.training.gold_io [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.training.warnings [assertion]
      early skip of rewriting module: spacy.training.srsly [assertion]
      early skip of rewriting module: spacy.training.loggers [assertion]
      early skip of rewriting module: tqdm [assertion]
      early skip of rewriting module: tqdm._monitor [assertion]
      early skip of rewriting module: tqdm._tqdm_pandas [assertion]
      early skip of rewriting module: tqdm.cli [assertion]
      early skip of rewriting module: tqdm.std [assertion]
      early skip of rewriting module: tqdm.utils [assertion]
      early skip of rewriting module: tqdm.version [assertion]
      early skip of rewriting module: tqdm._dist_ver [assertion]
      early skip of rewriting module: tqdm.gui [assertion]
      early skip of rewriting module: spacy.tokenizer [assertion]
      early skip of rewriting module: spacy.matcher [assertion]
      early skip of rewriting module: spacy.matcher.dependencymatcher [assertion]
      early skip of rewriting module: spacy.matcher.matcher [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.matcher.typing [assertion]
      early skip of rewriting module: spacy.matcher.re [assertion]
      early skip of rewriting module: spacy.matcher.warnings [assertion]
      early skip of rewriting module: spacy.matcher.srsly [assertion]
      early skip of rewriting module: spacy.matcher.levenshtein [assertion]
      early skip of rewriting module: spacy.matcher.typing [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.matcher.warnings [assertion]
      early skip of rewriting module: spacy.matcher.collections [assertion]
      early skip of rewriting module: spacy.matcher.itertools [assertion]
      early skip of rewriting module: spacy.matcher.typing [assertion]
      early skip of rewriting module: spacy.matcher.phrasematcher [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.matcher.warnings [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.re [assertion]
      early skip of rewriting module: spacy.training.initialize [assertion]
      early skip of rewriting module: tarfile [assertion]
      early skip of rewriting module: pwd [assertion]
      early skip of rewriting module: grp [assertion]
      early skip of rewriting module: spacy.training.pretrain [assertion]
      early skip of rewriting module: spacy.pipeline.pipe [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline.warnings [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.srsly [assertion]
      early skip of rewriting module: spacy.pipeline.dep_parser [assertion]
      early skip of rewriting module: spacy.pipeline.transition_parser [assertion]
      early skip of rewriting module: spacy.pipeline.trainable_pipe [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.srsly [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.stateclass [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.transition_system [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.collections [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.srsly [assertion]
      early skip of rewriting module: spacy.ml [assertion]
      early skip of rewriting module: spacy.ml.callbacks [assertion]
      early skip of rewriting module: spacy.ml.models [assertion]
      early skip of rewriting module: spacy.ml.models.entity_linker [assertion]
      early skip of rewriting module: spacy.kb [assertion]
      early skip of rewriting module: spacy.kb.candidate [assertion]
      early skip of rewriting module: spacy.kb.kb [assertion]
      early skip of rewriting module: spacy.kb.pathlib [assertion]
      early skip of rewriting module: spacy.kb.typing [assertion]
      early skip of rewriting module: spacy.kb.typing [assertion]
      early skip of rewriting module: spacy.kb.kb_in_memory [assertion]
      early skip of rewriting module: spacy.kb.typing [assertion]
      early skip of rewriting module: spacy.kb.srsly [assertion]
      early skip of rewriting module: spacy.kb.warnings [assertion]
      early skip of rewriting module: spacy.kb.pathlib [assertion]
      early skip of rewriting module: spacy.ml.extract_spans [assertion]
      early skip of rewriting module: spacy.ml.models.multi_task [assertion]
      early skip of rewriting module: spacy.ml.models.parser [assertion]
      early skip of rewriting module: spacy.ml._precomputable_affine [assertion]
      early skip of rewriting module: spacy.ml.tb_framework [assertion]
      early skip of rewriting module: spacy.ml.parser_model [assertion]
      early skip of rewriting module: spacy.ml.numpy [assertion]
      early skip of rewriting module: spacy.ml.numpy [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random.bit_generator [assertion]
      early skip of rewriting module: numpy.random._common [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: numpy.random._bounded_integers [assertion]
      early skip of rewriting module: numpy.random._mt19937 [assertion]
      early skip of rewriting module: numpy.random._philox [assertion]
      early skip of rewriting module: numpy.random._pcg64 [assertion]
      early skip of rewriting module: numpy.random._sfc64 [assertion]
      early skip of rewriting module: numpy.random._generator [assertion]
      early skip of rewriting module: spacy.ml.thinc [assertion]
      early skip of rewriting module: spacy.ml.models.span_finder [assertion]
      early skip of rewriting module: spacy.ml.models.spancat [assertion]
      early skip of rewriting module: spacy.ml.models.tagger [assertion]
      early skip of rewriting module: spacy.ml.models.textcat [assertion]
      early skip of rewriting module: spacy.ml.extract_ngrams [assertion]
      early skip of rewriting module: spacy.ml.staticvectors [assertion]
      early skip of rewriting module: spacy.ml.models.tok2vec [assertion]
      early skip of rewriting module: spacy.ml._character_embed [assertion]
      early skip of rewriting module: spacy.pipeline.tok2vec [assertion]
      early skip of rewriting module: spacy.ml.featureextractor [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline.itertools [assertion]
      early skip of rewriting module: spacy.pipeline.random [assertion]
      early skip of rewriting module: spacy.pipeline.numpy [assertion]
      early skip of rewriting module: spacy.pipeline.numpy [assertion]
      early skip of rewriting module: spacy.pipeline.srsly [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals._beam_utils [assertion]
      early skip of rewriting module: thinc.extra [assertion]
      early skip of rewriting module: thinc.extra.search [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: thinc.extra.math [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.numpy [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.thinc [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.arc_eager [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.collections [assertion]
      early skip of rewriting module: spacy.pipeline.collections [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline.functions [assertion]
      early skip of rewriting module: spacy.pipeline.edit_tree_lemmatizer [assertion]
      early skip of rewriting module: spacy.pipeline._edit_tree_internals [assertion]
      early skip of rewriting module: spacy.pipeline._edit_tree_internals.edit_trees [assertion]
      early skip of rewriting module: spacy.pipeline._edit_tree_internals.schemas [assertion]
      early skip of rewriting module: spacy.pipeline.lemmatizer [assertion]
      early skip of rewriting module: spacy.pipeline.entity_linker [assertion]
      early skip of rewriting module: spacy.pipeline.legacy [assertion]
      early skip of rewriting module: spacy.pipeline.legacy.entity_linker [assertion]
      early skip of rewriting module: spacy.pipeline.entityruler [assertion]
      early skip of rewriting module: spacy.pipeline.morphologizer [assertion]
      early skip of rewriting module: spacy.pipeline.itertools [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline.tagger [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline.itertools [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.numpy [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline.ner [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.ner [assertion]
      early skip of rewriting module: spacy.pipeline._parser_internals.collections [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline.collections [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline.sentencizer [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.srsly [assertion]
      early skip of rewriting module: spacy.pipeline.senter [assertion]
      early skip of rewriting module: spacy.pipeline.itertools [assertion]
      early skip of rewriting module: spacy.pipeline.typing [assertion]
      early skip of rewriting module: spacy.pipeline.thinc [assertion]
      early skip of rewriting module: spacy.pipeline.span_finder [assertion]
      early skip of rewriting module: spacy.pipeline.spancat [assertion]
      early skip of rewriting module: spacy.pipeline.span_ruler [assertion]
      early skip of rewriting module: spacy.pipeline.textcat [assertion]
      early skip of rewriting module: spacy.pipeline.textcat_multilabel [assertion]
      early skip of rewriting module: spacy.cli [assertion]
      early skip of rewriting module: spacy.cli.download [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3._base_connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: urllib3.util.util [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.ssltransport [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3._version [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: urllib3._request_methods [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: zstandard [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.http2 [assertion]
      early skip of rewriting module: urllib3.http2.probe [assertion]
      early skip of rewriting module: urllib3.util.ssl_match_hostname [assertion]
      early skip of rewriting module: urllib3.util.proxy [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: importlib.readers [assertion]
      early skip of rewriting module: importlib.resources.readers [assertion]
      early skip of rewriting module: importlib.resources._itertools [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
      early skip of rewriting module: typer [assertion]
      early skip of rewriting module: typer.colors [assertion]
      early skip of rewriting module: typer.main [assertion]
      early skip of rewriting module: typer._typing [assertion]
      early skip of rewriting module: typer.completion [assertion]
      early skip of rewriting module: typer._completion_classes [assertion]
      early skip of rewriting module: click.shell_completion [assertion]
      early skip of rewriting module: typer._completion_shared [assertion]
      early skip of rewriting module: shellingham [assertion]
      early skip of rewriting module: shellingham._core [assertion]
      early skip of rewriting module: typer.models [assertion]
      early skip of rewriting module: typer.params [assertion]
      early skip of rewriting module: typer.utils [assertion]
      early skip of rewriting module: typer.core [assertion]
      early skip of rewriting module: typer.rich_utils [assertion]
      early skip of rewriting module: rich.columns [assertion]
      early skip of rewriting module: rich.markdown [assertion]
      early skip of rewriting module: markdown_it [assertion]
      early skip of rewriting module: markdown_it.main [assertion]
      early skip of rewriting module: markdown_it.helpers [assertion]
      early skip of rewriting module: markdown_it.helpers.parse_link_destination [assertion]
      early skip of rewriting module: markdown_it.common [assertion]
      early skip of rewriting module: markdown_it.common.utils [assertion]
      early skip of rewriting module: markdown_it.common.entities [assertion]
      early skip of rewriting module: markdown_it.helpers.parse_link_label [assertion]
      early skip of rewriting module: markdown_it.rules_inline [assertion]
      early skip of rewriting module: markdown_it.rules_inline.emphasis [assertion]
      early skip of rewriting module: markdown_it.rules_inline.state_inline [assertion]
      early skip of rewriting module: markdown_it._compat [assertion]
      early skip of rewriting module: markdown_it.ruler [assertion]
      early skip of rewriting module: markdown_it.utils [assertion]
      early skip of rewriting module: markdown_it.token [assertion]
      early skip of rewriting module: markdown_it.rules_inline.strikethrough [assertion]
      early skip of rewriting module: markdown_it.rules_inline.autolink [assertion]
      early skip of rewriting module: markdown_it.rules_inline.backticks [assertion]
      early skip of rewriting module: markdown_it.rules_inline.balance_pairs [assertion]
      early skip of rewriting module: markdown_it.rules_inline.entity [assertion]
      early skip of rewriting module: markdown_it.rules_inline.escape [assertion]
      early skip of rewriting module: markdown_it.rules_inline.fragments_join [assertion]
      early skip of rewriting module: markdown_it.rules_inline.html_inline [assertion]
      early skip of rewriting module: markdown_it.common.html_re [assertion]
      early skip of rewriting module: markdown_it.rules_inline.image [assertion]
      early skip of rewriting module: markdown_it.rules_inline.link [assertion]
      early skip of rewriting module: markdown_it.rules_inline.linkify [assertion]
      early skip of rewriting module: markdown_it.rules_inline.newline [assertion]
      early skip of rewriting module: markdown_it.rules_inline.text [assertion]
      early skip of rewriting module: markdown_it.helpers.parse_link_title [assertion]
      early skip of rewriting module: markdown_it.presets [assertion]
      early skip of rewriting module: markdown_it.presets.commonmark [assertion]
      early skip of rewriting module: markdown_it.presets.default [assertion]
      early skip of rewriting module: markdown_it.presets.zero [assertion]
      early skip of rewriting module: markdown_it.common.normalize_url [assertion]
      early skip of rewriting module: mdurl [assertion]
      early skip of rewriting module: mdurl._decode [assertion]
      early skip of rewriting module: mdurl._encode [assertion]
      early skip of rewriting module: mdurl._format [assertion]
      early skip of rewriting module: mdurl._parse [assertion]
      early skip of rewriting module: mdurl._url [assertion]
      early skip of rewriting module: markdown_it._punycode [assertion]
      early skip of rewriting module: markdown_it.parser_block [assertion]
      early skip of rewriting module: markdown_it.rules_block [assertion]
      early skip of rewriting module: markdown_it.rules_block.blockquote [assertion]
      early skip of rewriting module: markdown_it.rules_block.state_block [assertion]
      early skip of rewriting module: markdown_it.rules_block.code [assertion]
      early skip of rewriting module: markdown_it.rules_block.fence [assertion]
      early skip of rewriting module: markdown_it.rules_block.heading [assertion]
      early skip of rewriting module: markdown_it.rules_block.hr [assertion]
      early skip of rewriting module: markdown_it.rules_block.html_block [assertion]
      early skip of rewriting module: markdown_it.common.html_blocks [assertion]
      early skip of rewriting module: markdown_it.rules_block.lheading [assertion]
      early skip of rewriting module: markdown_it.rules_block.list [assertion]
      early skip of rewriting module: markdown_it.rules_block.paragraph [assertion]
      early skip of rewriting module: markdown_it.rules_block.reference [assertion]
      early skip of rewriting module: markdown_it.rules_block.table [assertion]
      early skip of rewriting module: markdown_it.parser_core [assertion]
      early skip of rewriting module: markdown_it.rules_core [assertion]
      early skip of rewriting module: markdown_it.rules_core.block [assertion]
      early skip of rewriting module: markdown_it.rules_core.state_core [assertion]
      early skip of rewriting module: markdown_it.rules_core.inline [assertion]
      early skip of rewriting module: markdown_it.rules_core.linkify [assertion]
      early skip of rewriting module: markdown_it.rules_core.normalize [assertion]
      early skip of rewriting module: markdown_it.rules_core.replacements [assertion]
      early skip of rewriting module: markdown_it.rules_core.smartquotes [assertion]
      early skip of rewriting module: markdown_it.rules_core.text_join [assertion]
      early skip of rewriting module: markdown_it.parser_inline [assertion]
      early skip of rewriting module: markdown_it.renderer [assertion]
      early skip of rewriting module: linkify_it [assertion]
      early skip of rewriting module: rich._stack [assertion]
      early skip of rewriting module: rich.rule [assertion]
      early skip of rewriting module: rich.traceback [assertion]
      early skip of rewriting module: spacy.cli._util [assertion]
      early skip of rewriting module: weasel [assertion]
      early skip of rewriting module: weasel.cli [assertion]
      early skip of rewriting module: weasel.cli.main [assertion]
      early skip of rewriting module: weasel.cli.assets [assertion]
      early skip of rewriting module: weasel.util [assertion]
      early skip of rewriting module: weasel.util.commands [assertion]
      early skip of rewriting module: weasel.compat [assertion]
      early skip of rewriting module: weasel.errors [assertion]
      early skip of rewriting module: weasel.util.config [assertion]
      early skip of rewriting module: weasel.schemas [assertion]
      early skip of rewriting module: weasel.util.environment [assertion]
      early skip of rewriting module: weasel.util.frozen [assertion]
      early skip of rewriting module: weasel.util.logging [assertion]
      early skip of rewriting module: weasel.util.validation [assertion]
      early skip of rewriting module: weasel.util.filesystem [assertion]
      early skip of rewriting module: weasel.util.git [assertion]
      early skip of rewriting module: weasel.util.hashing [assertion]
      early skip of rewriting module: weasel.util.modules [assertion]
      early skip of rewriting module: weasel.util.remote [assertion]
      early skip of rewriting module: weasel.util.versions [assertion]
      early skip of rewriting module: weasel.cli.clone [assertion]
      early skip of rewriting module: weasel.about [assertion]
      early skip of rewriting module: weasel.cli.document [assertion]
      early skip of rewriting module: weasel.cli.dvc [assertion]
      early skip of rewriting module: weasel.cli.pull [assertion]
      early skip of rewriting module: weasel.cli.remote_storage [assertion]
      early skip of rewriting module: weasel.cli.run [assertion]
      early skip of rewriting module: weasel.cli.push [assertion]
      early skip of rewriting module: spacy.cli.apply [assertion]
      early skip of rewriting module: spacy.cli.assemble [assertion]
      early skip of rewriting module: spacy.cli.benchmark_speed [assertion]
      early skip of rewriting module: spacy.cli.convert [assertion]
      early skip of rewriting module: spacy.training.converters [assertion]
      early skip of rewriting module: spacy.training.converters.conll_ner_to_docs [assertion]
      early skip of rewriting module: spacy.training.converters.conllu_to_docs [assertion]
      early skip of rewriting module: spacy.training.converters.iob_to_docs [assertion]
      early skip of rewriting module: spacy.training.converters.json_to_docs [assertion]
      early skip of rewriting module: spacy.lang.xx [assertion]
      early skip of rewriting module: spacy.cli.debug_config [assertion]
      early skip of rewriting module: spacy.cli.debug_data [assertion]
      early skip of rewriting module: spacy.cli.debug_diff [assertion]
      early skip of rewriting module: spacy.cli.init_config [assertion]
      early skip of rewriting module: jinja2 [assertion]
      early skip of rewriting module: jinja2.bccache [assertion]
      early skip of rewriting module: jinja2.environment [assertion]
      early skip of rewriting module: markupsafe [assertion]
      early skip of rewriting module: markupsafe._speedups [assertion]
      early skip of rewriting module: jinja2.nodes [assertion]
      early skip of rewriting module: jinja2.utils [assertion]
      early skip of rewriting module: jinja2.compiler [assertion]
      early skip of rewriting module: jinja2.exceptions [assertion]
      early skip of rewriting module: jinja2.idtracking [assertion]
      early skip of rewriting module: jinja2.visitor [assertion]
      early skip of rewriting module: jinja2.optimizer [assertion]
      early skip of rewriting module: jinja2.defaults [assertion]
      early skip of rewriting module: jinja2.filters [assertion]
      early skip of rewriting module: jinja2.async_utils [assertion]
      early skip of rewriting module: jinja2.runtime [assertion]
      early skip of rewriting module: jinja2.tests [assertion]
      early skip of rewriting module: jinja2.lexer [assertion]
      early skip of rewriting module: jinja2._identifier [assertion]
      early skip of rewriting module: jinja2.parser [assertion]
      early skip of rewriting module: jinja2.loaders [assertion]
      early skip of rewriting module: spacy.cli.debug_model [assertion]
      early skip of rewriting module: spacy.cli.evaluate [assertion]
      early skip of rewriting module: spacy.displacy [assertion]
      early skip of rewriting module: spacy.displacy.render [assertion]
      early skip of rewriting module: spacy.displacy.templates [assertion]
      early skip of rewriting module: spacy.cli.find_function [assertion]
      early skip of rewriting module: spacy.cli.find_threshold [assertion]
      early skip of rewriting module: spacy.cli.info [assertion]
      early skip of rewriting module: spacy.cli.init_pipeline [assertion]
      early skip of rewriting module: spacy.cli.package [assertion]
      early skip of rewriting module: spacy.cli.pretrain [assertion]
      early skip of rewriting module: spacy.cli.profile [assertion]
      early skip of rewriting module: cProfile [assertion]
      early skip of rewriting module: _lsprof [assertion]
      early skip of rewriting module: profile [assertion]
      early skip of rewriting module: pstats [assertion]
      early skip of rewriting module: spacy.cli.project [assertion]
      early skip of rewriting module: spacy.cli.project.assets [assertion]
      early skip of rewriting module: spacy.cli.project.clone [assertion]
      early skip of rewriting module: spacy.cli.project.document [assertion]
      early skip of rewriting module: spacy.cli.project.dvc [assertion]
      early skip of rewriting module: spacy.cli.project.pull [assertion]
      early skip of rewriting module: spacy.cli.project.push [assertion]
      early skip of rewriting module: spacy.cli.project.run [assertion]
      early skip of rewriting module: spacy.cli.train [assertion]
      early skip of rewriting module: spacy.training.loop [assertion]
      early skip of rewriting module: spacy.cli.validate [assertion]
      early skip of rewriting module: spacy.glossary [assertion]
      early skip of rewriting module: dateparser [assertion]
      early skip of rewriting module: dateparser.conf [assertion]
      early skip of rewriting module: dateparser.data [assertion]
      early skip of rewriting module: dateparser.data.date_translation_data [assertion]
      early skip of rewriting module: dateparser.data.languages_info [assertion]
      early skip of rewriting module: dateparser.parser [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: regex [assertion]
      early skip of rewriting module: regex.regex [assertion]
      early skip of rewriting module: regex._regex_core [assertion]
      early skip of rewriting module: regex._regex [assertion]
      early skip of rewriting module: regex.DEFAULT_VERSION [assertion]
      early skip of rewriting module: dateparser.utils [assertion]
      early skip of rewriting module: tzlocal [assertion]
      early skip of rewriting module: tzlocal.unix [assertion]
      early skip of rewriting module: tzlocal.utils [assertion]
      early skip of rewriting module: tzlocal.windows_tz [assertion]
      early skip of rewriting module: dateparser.timezone_parser [assertion]
      early skip of rewriting module: dateparser.timezones [assertion]
      early skip of rewriting module: dateparser.utils.strptime [assertion]
      early skip of rewriting module: _strptime [assertion]
      early skip of rewriting module: dateparser_data [assertion]
      early skip of rewriting module: dateparser_data.settings [assertion]
      early skip of rewriting module: dateparser.date [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateparser.custom_language_detection [assertion]
      early skip of rewriting module: dateparser.custom_language_detection.language_mapping [assertion]
      early skip of rewriting module: dateparser.date_parser [assertion]
      early skip of rewriting module: dateparser.freshness_date_parser [assertion]
      early skip of rewriting module: dateparser.languages [assertion]
      early skip of rewriting module: dateparser.languages.loader [assertion]
      early skip of rewriting module: dateparser.languages.locale [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: six.moves.winreg [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: dateparser.languages.dictionary [assertion]
      early skip of rewriting module: core.strongs_words [assertion]
      early skip of rewriting module: core.strongs_words_en [assertion]
      early skip of rewriting module: fr_core_news_sm [assertion]
      early skip of rewriting module: spacy.lang.fr [assertion]
      early skip of rewriting module: spacy.lang.fr.lemmatizer [assertion]
      early skip of rewriting module: spacy.lang.fr.lex_attrs [assertion]
      early skip of rewriting module: spacy.lang.fr.punctuation [assertion]
      early skip of rewriting module: spacy.lang.fr.stop_words [assertion]
      early skip of rewriting module: spacy.lang.fr.syntax_iterators [assertion]
      early skip of rewriting module: spacy.lang.fr.tokenizer_exceptions [assertion]
      early skip of rewriting module: google [assertion]
      early skip of rewriting module: thinc_apple_ops [assertion]
      early skip of rewriting module: thinc_bigendian_ops [assertion]
      early skip of rewriting module: thinc_apple_ops [assertion]
      early skip of rewriting module: thinc_bigendian_ops [assertion]
      early skip of rewriting module: thinc_apple_ops [assertion]
      early skip of rewriting module: thinc_bigendian_ops [assertion]
      early skip of rewriting module: en_core_web_sm [assertion]
      early skip of rewriting module: spacy.lang.en [assertion]
      early skip of rewriting module: spacy.lang.en.lemmatizer [assertion]
      early skip of rewriting module: spacy.lang.en.lex_attrs [assertion]
      early skip of rewriting module: spacy.lang.en.punctuation [assertion]
      early skip of rewriting module: spacy.lang.en.stop_words [assertion]
      early skip of rewriting module: spacy.lang.en.syntax_iterators [assertion]
      early skip of rewriting module: spacy.lang.en.tokenizer_exceptions [assertion]
      early skip of rewriting module: google [assertion]
      early skip of rewriting module: thinc_apple_ops [assertion]
      early skip of rewriting module: thinc_bigendian_ops [assertion]
      early skip of rewriting module: thinc_apple_ops [assertion]
      early skip of rewriting module: thinc_bigendian_ops [assertion]
      early skip of rewriting module: markdown [assertion]
      early skip of rewriting module: markdown.core [assertion]
      early skip of rewriting module: markdown.util [assertion]
      early skip of rewriting module: markdown.preprocessors [assertion]
      early skip of rewriting module: markdown.htmlparser [assertion]
      early skip of rewriting module: html.parser [assertion]
      early skip of rewriting module: _markupbase [assertion]
      early skip of rewriting module: markdown.blockprocessors [assertion]
      early skip of rewriting module: markdown.blockparser [assertion]
      early skip of rewriting module: markdown.treeprocessors [assertion]
      early skip of rewriting module: markdown.inlinepatterns [assertion]
      early skip of rewriting module: markdown.postprocessors [assertion]
      early skip of rewriting module: markdown.extensions [assertion]
      early skip of rewriting module: markdown.serializers [assertion]
      early skip of rewriting module: markdown.__meta__ [assertion]
      early skip of rewriting module: httpcore [assertion]
      early skip of rewriting module: httpcore._api [assertion]
      early skip of rewriting module: httpcore._models [assertion]
      early skip of rewriting module: httpcore._sync [assertion]
      early skip of rewriting module: httpcore._sync.connection [assertion]
      early skip of rewriting module: httpcore._backends [assertion]
      early skip of rewriting module: httpcore._backends.sync [assertion]
      early skip of rewriting module: httpcore._exceptions [assertion]
      early skip of rewriting module: httpcore._utils [assertion]
      early skip of rewriting module: httpcore._backends.base [assertion]
      early skip of rewriting module: httpcore._ssl [assertion]
      early skip of rewriting module: httpcore._synchronization [assertion]
      early skip of rewriting module: trio [assertion]
      early skip of rewriting module: httpcore._trace [assertion]
      early skip of rewriting module: httpcore._sync.http11 [assertion]
      early skip of rewriting module: h11 [assertion]
      early skip of rewriting module: h11._connection [assertion]
      early skip of rewriting module: h11._events [assertion]
      early skip of rewriting module: h11._abnf [assertion]
      early skip of rewriting module: h11._headers [assertion]
      early skip of rewriting module: h11._util [assertion]
      early skip of rewriting module: h11._readers [assertion]
      early skip of rewriting module: h11._receivebuffer [assertion]
      early skip of rewriting module: h11._state [assertion]
      early skip of rewriting module: h11._writers [assertion]
      early skip of rewriting module: h11._version [assertion]
      early skip of rewriting module: httpcore._sync.interfaces [assertion]
      early skip of rewriting module: httpcore._sync.connection_pool [assertion]
      early skip of rewriting module: httpcore._sync.http_proxy [assertion]
      early skip of rewriting module: httpcore._sync.http2 [assertion]
      early skip of rewriting module: h2 [assertion]
      early skip of rewriting module: httpcore._sync.socks_proxy [assertion]
      early skip of rewriting module: socksio [assertion]
      early skip of rewriting module: httpcore._async [assertion]
      early skip of rewriting module: httpcore._async.connection [assertion]
      early skip of rewriting module: httpcore._backends.auto [assertion]
      early skip of rewriting module: httpcore._async.http11 [assertion]
      early skip of rewriting module: httpcore._async.interfaces [assertion]
      early skip of rewriting module: httpcore._async.connection_pool [assertion]
      early skip of rewriting module: httpcore._async.http_proxy [assertion]
      early skip of rewriting module: httpcore._async.http2 [assertion]
      early skip of rewriting module: h2 [assertion]
      early skip of rewriting module: httpcore._async.socks_proxy [assertion]
      early skip of rewriting module: socksio [assertion]
      early skip of rewriting module: httpcore._backends.mock [assertion]
      early skip of rewriting module: httpcore._backends.anyio [assertion]
      early skip of rewriting module: httpcore._backends.trio [assertion]
      early skip of rewriting module: trio [assertion]
      early skip of rewriting module: unittest.mock [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: pytest
            obj: <module 'pytest' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: build_enriched_prompt
            obj: <function build_enriched_prompt at 0x753670536840>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: call_openai
            obj: <function call_openai at 0x7536705367a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: generate_journalistic_angles
            obj: <function generate_journalistic_angles at 0x7536705368e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: suggest_datasets_llm
            obj: <function suggest_datasets_llm at 0x753670536980>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: parse_markdown_list
            obj: <function parse_markdown_list at 0x753670536ac0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: patch
            obj: <function patch at 0x75367057ae80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: test_build_enriched_prompt_structure_and_content
            obj: <function test_build_enriched_prompt_structure_and_content at 0x753689917920>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732ab260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_build_enriched_prompt_structure_and_content>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: test_call_openai_returns_text_without_api_call
            obj: <function test_call_openai_returns_text_without_api_call at 0x753670537560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753674784320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_call_openai_returns_text_without_api_call>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: test_generate_journalistic_angles_mocked_response
            obj: <function test_generate_journalistic_angles_mocked_response at 0x753670536ca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536734bfe30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_journalistic_angles_mocked_response>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: test_suggest_datasets_llm_mocked_response
            obj: <function test_suggest_datasets_llm_mocked_response at 0x75367057dee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732e8800>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_suggest_datasets_llm_mocked_response>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: test_parse_markdown_list_extracts_titles_and_contents
            obj: <function test_parse_markdown_list_extracts_titles_and_contents at 0x75367057e2a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753674784320>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_markdown_list_extracts_titles_and_contents>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_llm_engine.py>
            name: test_call_openai_handles_exception_gracefully
            obj: <function test_call_openai_handles_exception_gracefully at 0x75367057e340>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75368b0caf60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_call_openai_handles_exception_gracefully>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/unit/test_llm_engine.py' lenresult=6 outcome='passed'> [hook]
    genitems <Function test_build_enriched_prompt_structure_and_content> [collection]
      pytest_itemcollected [hook]
          item: <Function test_build_enriched_prompt_structure_and_content>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_call_openai_returns_text_without_api_call> [collection]
      pytest_itemcollected [hook]
          item: <Function test_call_openai_returns_text_without_api_call>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_generate_journalistic_angles_mocked_response> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_journalistic_angles_mocked_response>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_suggest_datasets_llm_mocked_response> [collection]
      pytest_itemcollected [hook]
          item: <Function test_suggest_datasets_llm_mocked_response>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_markdown_list_extracts_titles_and_contents> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_markdown_list_extracts_titles_and_contents>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_call_openai_handles_exception_gracefully> [collection]
      pytest_itemcollected [hook]
          item: <Function test_call_openai_handles_exception_gracefully>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/unit/test_llm_engine.py' lenresult=6 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_nlp_utils.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_nlp_utils.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_nlp_utils.py>
      find_module called for: tests_pytest.unit.test_nlp_utils [assertion]
      matched test file '/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py' [assertion]
      found cached rewritten pyc for /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/unit/test_nlp_utils.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: get_nlp
            obj: <function get_nlp at 0x753677f305e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: extract_named_entities
            obj: <function extract_named_entities at 0x75366fa08720>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: extract_numbers_and_units
            obj: <function extract_numbers_and_units at 0x75366fa08680>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: extract_dates
            obj: <function extract_dates at 0x75366fa085e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: extract_strong_verbs
            obj: <function extract_strong_verbs at 0x75366fa08540>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: format_entities
            obj: <function format_entities at 0x75366fa084a0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: compute_datafication_score
            obj: <function compute_datafication_score at 0x75366fa08400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: group_named_entities
            obj: <function group_named_entities at 0x75366fa08360>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: interpret_datafication_score
            obj: <function interpret_datafication_score at 0x75366fa082c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: get_article_profile
            obj: <function get_article_profile at 0x75366fa08040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: spacy
            obj: <module 'spacy' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/spacy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_get_nlp_returns_spacy_pipeline
            obj: <function test_get_nlp_returns_spacy_pipeline at 0x75367057f100>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732814c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_nlp_returns_spacy_pipeline>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_named_entities_french
            obj: <function test_extract_named_entities_french at 0x75367057f1a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753673282ff0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_named_entities_french>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_named_entities_english
            obj: <function test_extract_named_entities_english at 0x75367057f240>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732814c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_named_entities_english>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_numbers_and_units_basic_cases
            obj: <function test_extract_numbers_and_units_basic_cases at 0x75367057f2e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753673282ff0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_numbers_and_units_basic_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_numbers_and_units_excludes_auxiliaries
            obj: <function test_extract_numbers_and_units_excludes_auxiliaries at 0x75367057f380>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_numbers_and_units_excludes_auxiliaries>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_dates_detects_multiple_formats
            obj: <function test_extract_dates_detects_multiple_formats at 0x75367057f420>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_dates_detects_multiple_formats>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_dates_ignores_invalid_inputs
            obj: <function test_extract_dates_ignores_invalid_inputs at 0x75367057f4c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_dates_ignores_invalid_inputs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_strong_verbs_detects_known_lemmas
            obj: <function test_extract_strong_verbs_detects_known_lemmas at 0x75367057f560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_strong_verbs_detects_known_lemmas>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_strong_verbs_ignores_non_matching_verbs
            obj: <function test_extract_strong_verbs_ignores_non_matching_verbs at 0x75367057f600>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_strong_verbs_ignores_non_matching_verbs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_format_entities_aggregates_all_extractors
            obj: <function test_format_entities_aggregates_all_extractors at 0x75367057f6a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_format_entities_aggregates_all_extractors>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_compute_datafication_score_high
            obj: <function test_compute_datafication_score_high at 0x75367057f740>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_compute_datafication_score_high>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_compute_datafication_score_low_density_penalty
            obj: <function test_compute_datafication_score_low_density_penalty at 0x75367057f7e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_compute_datafication_score_low_density_penalty>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_group_named_entities_counts_occurrences_by_label
            obj: <function test_group_named_entities_counts_occurrences_by_label at 0x75367057f880>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_group_named_entities_counts_occurrences_by_label>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_interpret_datafication_score_ranges
            obj: <function test_interpret_datafication_score_ranges at 0x75367057f920>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_interpret_datafication_score_ranges>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_get_article_profile_datajournalisme_eleve
            obj: <function test_get_article_profile_datajournalisme_eleve at 0x75367057f9c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_article_profile_datajournalisme_eleve>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_get_article_profile_localise_temporel
            obj: <function test_get_article_profile_localise_temporel at 0x75367057fa60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_article_profile_localise_temporel>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_get_article_profile_narratif_descriptif
            obj: <function test_get_article_profile_narratif_descriptif at 0x75367057fb00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_article_profile_narratif_descriptif>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_get_article_profile_structure_quantifiable
            obj: <function test_get_article_profile_structure_quantifiable at 0x75367057fba0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_article_profile_structure_quantifiable>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_get_article_profile_exploratoire
            obj: <function test_get_article_profile_exploratoire at 0x75367057fc40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732df260>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_article_profile_exploratoire>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_nlp_utils.py>
            name: test_extract_numbers_excludes_unit_est
            obj: <function test_extract_numbers_excludes_unit_est at 0x75367057fce0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732dcf20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_extract_numbers_excludes_unit_est>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/unit/test_nlp_utils.py' lenresult=20 outcome='passed'> [hook]
    genitems <Function test_get_nlp_returns_spacy_pipeline> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_nlp_returns_spacy_pipeline>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_named_entities_french> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_named_entities_french>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_named_entities_english> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_named_entities_english>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_numbers_and_units_basic_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_numbers_and_units_basic_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_numbers_and_units_excludes_auxiliaries> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_dates_detects_multiple_formats> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_dates_detects_multiple_formats>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_dates_ignores_invalid_inputs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_dates_ignores_invalid_inputs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_strong_verbs_detects_known_lemmas> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_strong_verbs_detects_known_lemmas>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_strong_verbs_ignores_non_matching_verbs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_format_entities_aggregates_all_extractors> [collection]
      pytest_itemcollected [hook]
          item: <Function test_format_entities_aggregates_all_extractors>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_compute_datafication_score_high> [collection]
      pytest_itemcollected [hook]
          item: <Function test_compute_datafication_score_high>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_compute_datafication_score_low_density_penalty> [collection]
      pytest_itemcollected [hook]
          item: <Function test_compute_datafication_score_low_density_penalty>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_group_named_entities_counts_occurrences_by_label> [collection]
      pytest_itemcollected [hook]
          item: <Function test_group_named_entities_counts_occurrences_by_label>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_interpret_datafication_score_ranges> [collection]
      pytest_itemcollected [hook]
          item: <Function test_interpret_datafication_score_ranges>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_article_profile_datajournalisme_eleve> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_article_profile_datajournalisme_eleve>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_article_profile_localise_temporel> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_article_profile_localise_temporel>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_article_profile_narratif_descriptif> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_article_profile_narratif_descriptif>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_article_profile_structure_quantifiable> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_article_profile_structure_quantifiable>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_article_profile_exploratoire> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_article_profile_exploratoire>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_extract_numbers_excludes_unit_est> [collection]
      pytest_itemcollected [hook]
          item: <Function test_extract_numbers_excludes_unit_est>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/unit/test_nlp_utils.py' lenresult=20 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/unit' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir integration> [collection]
      pytest_collectstart [hook]
          collector: <Dir integration>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir integration>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/__pycache__
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            collection_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir integration>
            file_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py
            path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir integration>
              module_path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py
              path: /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py
          finish pytest_pycollect_makemodule --> <Module test_routes.py> [hook]
        finish pytest_collect_file --> [<Module test_routes.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/integration' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_routes.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_routes.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_routes.py>
      find_module called for: test_routes [assertion]
      matched test file '/home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py' [assertion]
      found cached rewritten pyc for /home/hericdev/MEDIA_PROJECTS/Datascope/tests_pytest/integration/test_routes.py [assertion]
      early skip of rewriting module: app [assertion]
      early skip of rewriting module: flask [assertion]
      early skip of rewriting module: flask.json [assertion]
      early skip of rewriting module: flask.globals [assertion]
      early skip of rewriting module: werkzeug [assertion]
      early skip of rewriting module: werkzeug.serving [assertion]
      early skip of rewriting module: socketserver [assertion]
      early skip of rewriting module: http.server [assertion]
      early skip of rewriting module: werkzeug._internal [assertion]
      early skip of rewriting module: werkzeug.exceptions [assertion]
      early skip of rewriting module: werkzeug.urls [assertion]
      early skip of rewriting module: werkzeug.datastructures [assertion]
      early skip of rewriting module: werkzeug.datastructures.accept [assertion]
      early skip of rewriting module: werkzeug.datastructures.structures [assertion]
      early skip of rewriting module: werkzeug.datastructures.mixins [assertion]
      early skip of rewriting module: werkzeug.http [assertion]
      early skip of rewriting module: werkzeug.sansio [assertion]
      early skip of rewriting module: werkzeug.sansio.http [assertion]
      early skip of rewriting module: werkzeug.datastructures.auth [assertion]
      early skip of rewriting module: werkzeug.datastructures.cache_control [assertion]
      early skip of rewriting module: werkzeug.datastructures.csp [assertion]
      early skip of rewriting module: werkzeug.datastructures.etag [assertion]
      early skip of rewriting module: werkzeug.datastructures.file_storage [assertion]
      early skip of rewriting module: werkzeug.datastructures.headers [assertion]
      early skip of rewriting module: werkzeug.datastructures.range [assertion]
      early skip of rewriting module: werkzeug.test [assertion]
      early skip of rewriting module: werkzeug.sansio.multipart [assertion]
      early skip of rewriting module: werkzeug.utils [assertion]
      early skip of rewriting module: werkzeug.security [assertion]
      early skip of rewriting module: werkzeug.wsgi [assertion]
      early skip of rewriting module: werkzeug.sansio.utils [assertion]
      early skip of rewriting module: werkzeug.wrappers [assertion]
      early skip of rewriting module: werkzeug.wrappers.request [assertion]
      early skip of rewriting module: werkzeug.formparser [assertion]
      early skip of rewriting module: werkzeug.sansio.request [assertion]
      early skip of rewriting module: werkzeug.user_agent [assertion]
      early skip of rewriting module: werkzeug.wrappers.response [assertion]
      early skip of rewriting module: werkzeug.sansio.response [assertion]
      early skip of rewriting module: werkzeug.local [assertion]
      early skip of rewriting module: flask.json.provider [assertion]
      early skip of rewriting module: flask.app [assertion]
      early skip of rewriting module: werkzeug.routing [assertion]
      early skip of rewriting module: werkzeug.routing.converters [assertion]
      early skip of rewriting module: werkzeug.routing.exceptions [assertion]
      early skip of rewriting module: werkzeug.routing.map [assertion]
      early skip of rewriting module: werkzeug.routing.matcher [assertion]
      early skip of rewriting module: werkzeug.routing.rules [assertion]
      early skip of rewriting module: flask.cli [assertion]
      early skip of rewriting module: flask.helpers [assertion]
      early skip of rewriting module: flask.signals [assertion]
      early skip of rewriting module: blinker [assertion]
      early skip of rewriting module: blinker.base [assertion]
      early skip of rewriting module: blinker._utilities [assertion]
      early skip of rewriting module: flask.typing [assertion]
      early skip of rewriting module: flask.ctx [assertion]
      early skip of rewriting module: flask.sansio [assertion]
      early skip of rewriting module: flask.sansio.app [assertion]
      early skip of rewriting module: flask.config [assertion]
      early skip of rewriting module: flask.logging [assertion]
      early skip of rewriting module: flask.templating [assertion]
      early skip of rewriting module: flask.sansio.scaffold [assertion]
      early skip of rewriting module: flask.sessions [assertion]
      early skip of rewriting module: itsdangerous [assertion]
      early skip of rewriting module: itsdangerous.encoding [assertion]
      early skip of rewriting module: itsdangerous.exc [assertion]
      early skip of rewriting module: itsdangerous.serializer [assertion]
      early skip of rewriting module: itsdangerous.signer [assertion]
      early skip of rewriting module: itsdangerous.timed [assertion]
      early skip of rewriting module: itsdangerous.url_safe [assertion]
      early skip of rewriting module: itsdangerous._json [assertion]
      early skip of rewriting module: flask.json.tag [assertion]
      early skip of rewriting module: flask.wrappers [assertion]
      early skip of rewriting module: flask.blueprints [assertion]
      early skip of rewriting module: flask.sansio.blueprints [assertion]
      early skip of rewriting module: flask_login [assertion]
      early skip of rewriting module: flask_login.__about__ [assertion]
      early skip of rewriting module: flask_login.config [assertion]
      early skip of rewriting module: flask_login.login_manager [assertion]
      early skip of rewriting module: flask_login.mixins [assertion]
      early skip of rewriting module: flask_login.signals [assertion]
      early skip of rewriting module: flask_login.utils [assertion]
      find_module called for: flask_login.test_client [assertion]
      matched test file '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/flask_login/test_client.py' [assertion]
      found cached rewritten pyc for /home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/flask_login/test_client.py [assertion]
      early skip of rewriting module: flask.testing [assertion]
      early skip of rewriting module: click.testing [assertion]
      early skip of rewriting module: models [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: pytest
            obj: <module 'pytest' from '/home/hericdev/MEDIA_PROJECTS/Datascope/venv/lib/python3.12/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: create_app
            obj: <function create_app at 0x75367057c720>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: io
            obj: <module 'io' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: client
            obj: <function client at 0x75367057c540>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_login_get_page
            obj: <function test_login_get_page at 0x75367057c220>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536747f66f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_login_get_page>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_login_post_valid_email
            obj: <function test_login_post_valid_email at 0x7536703267a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75367476e6c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_login_post_valid_email>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_homepage_loads
            obj: <function test_homepage_loads at 0x7536703add00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732d2420>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_homepage_loads>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_analyze_route_with_text
            obj: <function test_analyze_route_with_text at 0x7536703adda0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753673279ac0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_analyze_route_with_text>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_about_page_loads
            obj: <function test_about_page_loads at 0x7536703ade40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753674800da0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_about_page_loads>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_analyze_with_uploaded_txt_file
            obj: <function test_analyze_with_uploaded_txt_file at 0x7536703adee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x75367476e6c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_analyze_with_uploaded_txt_file>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_analyze_route_with_empty_text
            obj: <function test_analyze_route_with_empty_text at 0x7536703adf80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7536732d2420>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_analyze_route_with_empty_text>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_routes.py>
            name: test_download_route_returns_markdown
            obj: <function test_download_route_returns_markdown at 0x7536703ae020>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x753673279ac0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_download_route_returns_markdown>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests_pytest/integration/test_routes.py' lenresult=8 outcome='passed'> [hook]
    genitems <Function test_login_get_page> [collection]
      pytest_itemcollected [hook]
          item: <Function test_login_get_page>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_login_post_valid_email> [collection]
      pytest_itemcollected [hook]
          item: <Function test_login_post_valid_email>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_homepage_loads> [collection]
      pytest_itemcollected [hook]
          item: <Function test_homepage_loads>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_analyze_route_with_text> [collection]
      pytest_itemcollected [hook]
          item: <Function test_analyze_route_with_text>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_about_page_loads> [collection]
      pytest_itemcollected [hook]
          item: <Function test_about_page_loads>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_analyze_with_uploaded_txt_file> [collection]
      pytest_itemcollected [hook]
          item: <Function test_analyze_with_uploaded_txt_file>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_analyze_route_with_empty_text> [collection]
      pytest_itemcollected [hook]
          item: <Function test_analyze_route_with_empty_text>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_download_route_returns_markdown> [collection]
      pytest_itemcollected [hook]
          item: <Function test_download_route_returns_markdown>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/integration/test_routes.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests_pytest/integration' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x75368c7d3e30>
          items: [<Function test_read_txt_with_utf8_encoding>, <Function test_read_pdf_extracts_text>, <Function test_read_docx_extracts_all_paragraphs>, <Function test_extract_article_text_with_txt>, <Function test_extract_article_text_with_docx>, <Function test_extract_article_text_raises_on_unknown_extension>, <Function test_extract_article_text_with_pdf>, <Function test_export_analysis_to_markdown_english_full_coverage>, <Function test_export_analysis_to_markdown_creates_valid_structure>, <Function test_export_analysis_handles_empty_entities>, <Function test_build_enriched_prompt_structure_and_content>, <Function test_call_openai_returns_text_without_api_call>, <Function test_generate_journalistic_angles_mocked_response>, <Function test_suggest_datasets_llm_mocked_response>, <Function test_parse_markdown_list_extracts_titles_and_contents>, <Function test_call_openai_handles_exception_gracefully>, <Function test_get_nlp_returns_spacy_pipeline>, <Function test_extract_named_entities_french>, <Function test_extract_named_entities_english>, <Function test_extract_numbers_and_units_basic_cases>, <Function test_extract_numbers_and_units_excludes_auxiliaries>, <Function test_extract_dates_detects_multiple_formats>, <Function test_extract_dates_ignores_invalid_inputs>, <Function test_extract_strong_verbs_detects_known_lemmas>, <Function test_extract_strong_verbs_ignores_non_matching_verbs>, <Function test_format_entities_aggregates_all_extractors>, <Function test_compute_datafication_score_high>, <Function test_compute_datafication_score_low_density_penalty>, <Function test_group_named_entities_counts_occurrences_by_label>, <Function test_interpret_datafication_score_ranges>, <Function test_get_article_profile_datajournalisme_eleve>, <Function test_get_article_profile_localise_temporel>, <Function test_get_article_profile_narratif_descriptif>, <Function test_get_article_profile_structure_quantifiable>, <Function test_get_article_profile_exploratoire>, <Function test_extract_numbers_excludes_unit_est>, <Function test_login_get_page>, <Function test_login_post_valid_email>, <Function test_homepage_loads>, <Function test_analyze_route_with_text>, <Function test_about_page_loads>, <Function test_analyze_with_uploaded_txt_file>, <Function test_analyze_route_with_empty_text>, <Function test_download_route_returns_markdown>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x75368c7d3e30>
            items: [<Function test_read_txt_with_utf8_encoding>, <Function test_read_pdf_extracts_text>, <Function test_read_docx_extracts_all_paragraphs>, <Function test_extract_article_text_with_txt>, <Function test_extract_article_text_with_docx>, <Function test_extract_article_text_raises_on_unknown_extension>, <Function test_extract_article_text_with_pdf>, <Function test_export_analysis_to_markdown_english_full_coverage>, <Function test_export_analysis_to_markdown_creates_valid_structure>, <Function test_export_analysis_handles_empty_entities>, <Function test_build_enriched_prompt_structure_and_content>, <Function test_call_openai_returns_text_without_api_call>, <Function test_generate_journalistic_angles_mocked_response>, <Function test_suggest_datasets_llm_mocked_response>, <Function test_parse_markdown_list_extracts_titles_and_contents>, <Function test_call_openai_handles_exception_gracefully>, <Function test_get_nlp_returns_spacy_pipeline>, <Function test_extract_named_entities_french>, <Function test_extract_named_entities_english>, <Function test_extract_numbers_and_units_basic_cases>, <Function test_extract_numbers_and_units_excludes_auxiliaries>, <Function test_extract_dates_detects_multiple_formats>, <Function test_extract_dates_ignores_invalid_inputs>, <Function test_extract_strong_verbs_detects_known_lemmas>, <Function test_extract_strong_verbs_ignores_non_matching_verbs>, <Function test_format_entities_aggregates_all_extractors>, <Function test_compute_datafication_score_high>, <Function test_compute_datafication_score_low_density_penalty>, <Function test_group_named_entities_counts_occurrences_by_label>, <Function test_interpret_datafication_score_ranges>, <Function test_get_article_profile_datajournalisme_eleve>, <Function test_get_article_profile_localise_temporel>, <Function test_get_article_profile_narratif_descriptif>, <Function test_get_article_profile_structure_quantifiable>, <Function test_get_article_profile_exploratoire>, <Function test_extract_numbers_excludes_unit_est>, <Function test_login_get_page>, <Function test_login_post_valid_email>, <Function test_homepage_loads>, <Function test_analyze_route_with_text>, <Function test_about_page_loads>, <Function test_analyze_with_uploaded_txt_file>, <Function test_analyze_route_with_empty_text>, <Function test_download_route_returns_markdown>]
            start_path: /home/hericdev/MEDIA_PROJECTS/Datascope
            startdir: /home/hericdev/MEDIA_PROJECTS/Datascope
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=44>
      pytest_runtest_protocol [hook]
          item: <Function test_read_txt_with_utf8_encoding>
          nextitem: <Function test_read_pdf_extracts_text>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding
            location: ('tests_pytest/unit/test_article_parser.py', 7, 'test_read_txt_with_utf8_encoding')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_read_txt_with_utf8_encoding>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_txt_with_utf8_encoding>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_read_txt_with_utf8_encoding>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_read_txt_with_utf8_encoding>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_txt_with_utf8_encoding>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_read_txt_with_utf8_encoding>
            nextitem: <Function test_read_pdf_extracts_text>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_txt_with_utf8_encoding>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_read_txt_with_utf8_encoding
            location: ('tests_pytest/unit/test_article_parser.py', 7, 'test_read_txt_with_utf8_encoding')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_read_pdf_extracts_text>
          nextitem: <Function test_read_docx_extracts_all_paragraphs>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text
            location: ('tests_pytest/unit/test_article_parser.py', 34, 'test_read_pdf_extracts_text')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_read_pdf_extracts_text>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_pdf_extracts_text>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_read_pdf_extracts_text>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_read_pdf_extracts_text>
          early skip of rewriting module: reportlab [assertion]
          early skip of rewriting module: reportlab.local_rl_mods [assertion]
          early skip of rewriting module: reportlab_mods [assertion]
          early skip of rewriting module: reportlab.pdfgen [assertion]
          early skip of rewriting module: reportlab.pdfgen.canvas [assertion]
          early skip of rewriting module: reportlab.rl_config [assertion]
          early skip of rewriting module: reportlab.lib [assertion]
          early skip of rewriting module: reportlab.lib.utils [assertion]
          early skip of rewriting module: reportlab.lib.rltempfile [assertion]
          early skip of rewriting module: reportlab.lib.rl_safe_eval [assertion]
          early skip of rewriting module: PIL [assertion]
          early skip of rewriting module: PIL._version [assertion]
          early skip of rewriting module: PIL.Image [assertion]
          early skip of rewriting module: PIL.ExifTags [assertion]
          early skip of rewriting module: PIL.ImageMode [assertion]
          early skip of rewriting module: PIL._deprecate [assertion]
          early skip of rewriting module: PIL.TiffTags [assertion]
          early skip of rewriting module: PIL._binary [assertion]
          early skip of rewriting module: PIL._util [assertion]
          early skip of rewriting module: PIL._typing [assertion]
          early skip of rewriting module: defusedxml [assertion]
          early skip of rewriting module: PIL._imaging [assertion]
          early skip of rewriting module: reportlab.rl_settings [assertion]
          early skip of rewriting module: reportlab.local_rl_settings [assertion]
          early skip of rewriting module: reportlab_settings [assertion]
          early skip of rewriting module: reportlab.lib.pagesizes [assertion]
          early skip of rewriting module: reportlab.lib.units [assertion]
          early skip of rewriting module: reportlab.pdfbase [assertion]
          early skip of rewriting module: reportlab.pdfbase.pdfdoc [assertion]
          early skip of rewriting module: reportlab.pdfbase.pdfutils [assertion]
          early skip of rewriting module: reportlab.lib.rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: _rl_accel [assertion]
          early skip of rewriting module: reportlab.pdfbase.pdfmetrics [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_winansi [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_macroman [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_standard [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_symbol [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_zapfdingbats [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_pdfdoc [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_enc_macexpert [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courier [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courierbold [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courieroblique [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_courierboldoblique [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helvetica [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helveticabold [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helveticaoblique [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_helveticaboldoblique [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesroman [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesbold [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesitalic [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_timesbolditalic [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_symbol [assertion]
          early skip of rewriting module: reportlab.pdfbase._fontdata_widths_zapfdingbats [assertion]
          early skip of rewriting module: reportlab.lib.logger [assertion]
          early skip of rewriting module: reportlab.pdfbase.rl_codecs [assertion]
          early skip of rewriting module: reportlab.pdfbase.ttfonts [assertion]
          early skip of rewriting module: uharfbuzz [assertion]
          early skip of rewriting module: reportlab.pdfgen.pathobject [assertion]
          early skip of rewriting module: reportlab.pdfgen.pdfgeom [assertion]
          early skip of rewriting module: reportlab.pdfgen.textobject [assertion]
          early skip of rewriting module: reportlab.lib.colors [assertion]
          early skip of rewriting module: reportlab.lib.abag [assertion]
          early skip of rewriting module: reportlab.lib.boxstuff [assertion]
          early skip of rewriting module: encodings.winansiencoding [assertion]
          early skip of rewriting module: encodings.extpdfdoc [assertion]
          early skip of rewriting module: encodings.pdfdoc [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_pdf_extracts_text>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_read_pdf_extracts_text>
            nextitem: <Function test_read_docx_extracts_all_paragraphs>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_pdf_extracts_text>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_read_pdf_extracts_text
            location: ('tests_pytest/unit/test_article_parser.py', 34, 'test_read_pdf_extracts_text')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_read_docx_extracts_all_paragraphs>
          nextitem: <Function test_extract_article_text_with_txt>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs
            location: ('tests_pytest/unit/test_article_parser.py', 53, 'test_read_docx_extracts_all_paragraphs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_read_docx_extracts_all_paragraphs>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_docx_extracts_all_paragraphs>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_read_docx_extracts_all_paragraphs>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_read_docx_extracts_all_paragraphs>
          early skip of rewriting module: encodings.cp437 [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_docx_extracts_all_paragraphs>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_read_docx_extracts_all_paragraphs>
            nextitem: <Function test_extract_article_text_with_txt>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_read_docx_extracts_all_paragraphs>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_read_docx_extracts_all_paragraphs
            location: ('tests_pytest/unit/test_article_parser.py', 53, 'test_read_docx_extracts_all_paragraphs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_article_text_with_txt>
          nextitem: <Function test_extract_article_text_with_docx>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt
            location: ('tests_pytest/unit/test_article_parser.py', 75, 'test_extract_article_text_with_txt')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_article_text_with_txt>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_txt>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_article_text_with_txt>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_article_text_with_txt>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_txt>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_article_text_with_txt>
            nextitem: <Function test_extract_article_text_with_docx>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_txt>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_txt
            location: ('tests_pytest/unit/test_article_parser.py', 75, 'test_extract_article_text_with_txt')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_article_text_with_docx>
          nextitem: <Function test_extract_article_text_raises_on_unknown_extension>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx
            location: ('tests_pytest/unit/test_article_parser.py', 85, 'test_extract_article_text_with_docx')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_article_text_with_docx>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_docx>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_article_text_with_docx>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_article_text_with_docx>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_docx>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_article_text_with_docx>
            nextitem: <Function test_extract_article_text_raises_on_unknown_extension>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_docx>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_docx
            location: ('tests_pytest/unit/test_article_parser.py', 85, 'test_extract_article_text_with_docx')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_article_text_raises_on_unknown_extension>
          nextitem: <Function test_extract_article_text_with_pdf>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension
            location: ('tests_pytest/unit/test_article_parser.py', 98, 'test_extract_article_text_raises_on_unknown_extension')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_article_text_raises_on_unknown_extension>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_raises_on_unknown_extension>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_article_text_raises_on_unknown_extension>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_article_text_raises_on_unknown_extension>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_raises_on_unknown_extension>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_article_text_raises_on_unknown_extension>
            nextitem: <Function test_extract_article_text_with_pdf>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_raises_on_unknown_extension>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_raises_on_unknown_extension
            location: ('tests_pytest/unit/test_article_parser.py', 98, 'test_extract_article_text_raises_on_unknown_extension')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_article_text_with_pdf>
          nextitem: <Function test_export_analysis_to_markdown_english_full_coverage>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf
            location: ('tests_pytest/unit/test_article_parser.py', 112, 'test_extract_article_text_with_pdf')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_article_text_with_pdf>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_pdf>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_article_text_with_pdf>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_article_text_with_pdf>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_pdf>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_article_text_with_pdf>
            nextitem: <Function test_export_analysis_to_markdown_english_full_coverage>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_article_text_with_pdf>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_article_parser.py::test_extract_article_text_with_pdf
            location: ('tests_pytest/unit/test_article_parser.py', 112, 'test_extract_article_text_with_pdf')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_export_analysis_to_markdown_english_full_coverage>
          nextitem: <Function test_export_analysis_to_markdown_creates_valid_structure>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage
            location: ('tests_pytest/unit/test_export_utils.py', 3, 'test_export_analysis_to_markdown_english_full_coverage')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_export_analysis_to_markdown_english_full_coverage>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_to_markdown_english_full_coverage>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_export_analysis_to_markdown_english_full_coverage>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_export_analysis_to_markdown_english_full_coverage>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_to_markdown_english_full_coverage>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_export_analysis_to_markdown_english_full_coverage>
            nextitem: <Function test_export_analysis_to_markdown_creates_valid_structure>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_to_markdown_english_full_coverage>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_english_full_coverage
            location: ('tests_pytest/unit/test_export_utils.py', 3, 'test_export_analysis_to_markdown_english_full_coverage')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_export_analysis_to_markdown_creates_valid_structure>
          nextitem: <Function test_export_analysis_handles_empty_entities>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure
            location: ('tests_pytest/unit/test_export_utils.py', 54, 'test_export_analysis_to_markdown_creates_valid_structure')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_export_analysis_to_markdown_creates_valid_structure>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_to_markdown_creates_valid_structure>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_export_analysis_to_markdown_creates_valid_structure>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_export_analysis_to_markdown_creates_valid_structure>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_to_markdown_creates_valid_structure>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_export_analysis_to_markdown_creates_valid_structure>
            nextitem: <Function test_export_analysis_handles_empty_entities>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_to_markdown_creates_valid_structure>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_export_utils.py::test_export_analysis_to_markdown_creates_valid_structure
            location: ('tests_pytest/unit/test_export_utils.py', 54, 'test_export_analysis_to_markdown_creates_valid_structure')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_export_analysis_handles_empty_entities>
          nextitem: <Function test_build_enriched_prompt_structure_and_content>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities
            location: ('tests_pytest/unit/test_export_utils.py', 83, 'test_export_analysis_handles_empty_entities')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_export_analysis_handles_empty_entities>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_handles_empty_entities>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_export_analysis_handles_empty_entities>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_export_analysis_handles_empty_entities>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_handles_empty_entities>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_export_analysis_handles_empty_entities>
            nextitem: <Function test_build_enriched_prompt_structure_and_content>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_export_analysis_handles_empty_entities>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_export_utils.py::test_export_analysis_handles_empty_entities
            location: ('tests_pytest/unit/test_export_utils.py', 83, 'test_export_analysis_handles_empty_entities')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_build_enriched_prompt_structure_and_content>
          nextitem: <Function test_call_openai_returns_text_without_api_call>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content
            location: ('tests_pytest/unit/test_llm_engine.py', 9, 'test_build_enriched_prompt_structure_and_content')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_build_enriched_prompt_structure_and_content>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_enriched_prompt_structure_and_content>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_build_enriched_prompt_structure_and_content>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_build_enriched_prompt_structure_and_content>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_enriched_prompt_structure_and_content>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_build_enriched_prompt_structure_and_content>
            nextitem: <Function test_call_openai_returns_text_without_api_call>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_enriched_prompt_structure_and_content>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_build_enriched_prompt_structure_and_content
            location: ('tests_pytest/unit/test_llm_engine.py', 9, 'test_build_enriched_prompt_structure_and_content')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_call_openai_returns_text_without_api_call>
          nextitem: <Function test_generate_journalistic_angles_mocked_response>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call
            location: ('tests_pytest/unit/test_llm_engine.py', 41, 'test_call_openai_returns_text_without_api_call')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_call_openai_returns_text_without_api_call>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_call_openai_returns_text_without_api_call>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_call_openai_returns_text_without_api_call>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_call_openai_returns_text_without_api_call>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_call_openai_returns_text_without_api_call>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_call_openai_returns_text_without_api_call>
            nextitem: <Function test_generate_journalistic_angles_mocked_response>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_call_openai_returns_text_without_api_call>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_call_openai_returns_text_without_api_call
            location: ('tests_pytest/unit/test_llm_engine.py', 41, 'test_call_openai_returns_text_without_api_call')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_journalistic_angles_mocked_response>
          nextitem: <Function test_suggest_datasets_llm_mocked_response>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response
            location: ('tests_pytest/unit/test_llm_engine.py', 56, 'test_generate_journalistic_angles_mocked_response')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_journalistic_angles_mocked_response>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_journalistic_angles_mocked_response>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_journalistic_angles_mocked_response>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_journalistic_angles_mocked_response>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_journalistic_angles_mocked_response>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_journalistic_angles_mocked_response>
            nextitem: <Function test_suggest_datasets_llm_mocked_response>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_journalistic_angles_mocked_response>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_generate_journalistic_angles_mocked_response
            location: ('tests_pytest/unit/test_llm_engine.py', 56, 'test_generate_journalistic_angles_mocked_response')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_suggest_datasets_llm_mocked_response>
          nextitem: <Function test_parse_markdown_list_extracts_titles_and_contents>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response
            location: ('tests_pytest/unit/test_llm_engine.py', 75, 'test_suggest_datasets_llm_mocked_response')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_suggest_datasets_llm_mocked_response>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_suggest_datasets_llm_mocked_response>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_suggest_datasets_llm_mocked_response>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_suggest_datasets_llm_mocked_response>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_suggest_datasets_llm_mocked_response>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_suggest_datasets_llm_mocked_response>
            nextitem: <Function test_parse_markdown_list_extracts_titles_and_contents>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_suggest_datasets_llm_mocked_response>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_suggest_datasets_llm_mocked_response
            location: ('tests_pytest/unit/test_llm_engine.py', 75, 'test_suggest_datasets_llm_mocked_response')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_markdown_list_extracts_titles_and_contents>
          nextitem: <Function test_call_openai_handles_exception_gracefully>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents
            location: ('tests_pytest/unit/test_llm_engine.py', 90, 'test_parse_markdown_list_extracts_titles_and_contents')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_markdown_list_extracts_titles_and_contents>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_markdown_list_extracts_titles_and_contents>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_markdown_list_extracts_titles_and_contents>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_markdown_list_extracts_titles_and_contents>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_markdown_list_extracts_titles_and_contents>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_markdown_list_extracts_titles_and_contents>
            nextitem: <Function test_call_openai_handles_exception_gracefully>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_markdown_list_extracts_titles_and_contents>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_parse_markdown_list_extracts_titles_and_contents
            location: ('tests_pytest/unit/test_llm_engine.py', 90, 'test_parse_markdown_list_extracts_titles_and_contents')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_call_openai_handles_exception_gracefully>
          nextitem: <Function test_get_nlp_returns_spacy_pipeline>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully
            location: ('tests_pytest/unit/test_llm_engine.py', 112, 'test_call_openai_handles_exception_gracefully')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_call_openai_handles_exception_gracefully>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_call_openai_handles_exception_gracefully>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_call_openai_handles_exception_gracefully>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_call_openai_handles_exception_gracefully>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_call_openai_handles_exception_gracefully>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_call_openai_handles_exception_gracefully>
            nextitem: <Function test_get_nlp_returns_spacy_pipeline>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_call_openai_handles_exception_gracefully>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_llm_engine.py::test_call_openai_handles_exception_gracefully
            location: ('tests_pytest/unit/test_llm_engine.py', 112, 'test_call_openai_handles_exception_gracefully')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_nlp_returns_spacy_pipeline>
          nextitem: <Function test_extract_named_entities_french>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline
            location: ('tests_pytest/unit/test_nlp_utils.py', 12, 'test_get_nlp_returns_spacy_pipeline')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_nlp_returns_spacy_pipeline>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_nlp_returns_spacy_pipeline>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_nlp_returns_spacy_pipeline>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_nlp_returns_spacy_pipeline>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_nlp_returns_spacy_pipeline>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_nlp_returns_spacy_pipeline>
            nextitem: <Function test_extract_named_entities_french>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_nlp_returns_spacy_pipeline>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_nlp_returns_spacy_pipeline
            location: ('tests_pytest/unit/test_nlp_utils.py', 12, 'test_get_nlp_returns_spacy_pipeline')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_named_entities_french>
          nextitem: <Function test_extract_named_entities_english>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french
            location: ('tests_pytest/unit/test_nlp_utils.py', 25, 'test_extract_named_entities_french')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_named_entities_french>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_named_entities_french>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_named_entities_french>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_named_entities_french>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_named_entities_french>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_named_entities_french>
            nextitem: <Function test_extract_named_entities_english>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_named_entities_french>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_french
            location: ('tests_pytest/unit/test_nlp_utils.py', 25, 'test_extract_named_entities_french')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_named_entities_english>
          nextitem: <Function test_extract_numbers_and_units_basic_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english
            location: ('tests_pytest/unit/test_nlp_utils.py', 34, 'test_extract_named_entities_english')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_named_entities_english>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_named_entities_english>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_named_entities_english>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_named_entities_english>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_named_entities_english>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_named_entities_english>
            nextitem: <Function test_extract_numbers_and_units_basic_cases>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_named_entities_english>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_named_entities_english
            location: ('tests_pytest/unit/test_nlp_utils.py', 34, 'test_extract_named_entities_english')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_numbers_and_units_basic_cases>
          nextitem: <Function test_extract_numbers_and_units_excludes_auxiliaries>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases
            location: ('tests_pytest/unit/test_nlp_utils.py', 44, 'test_extract_numbers_and_units_basic_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_numbers_and_units_basic_cases>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_and_units_basic_cases>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_numbers_and_units_basic_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_numbers_and_units_basic_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_and_units_basic_cases>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_numbers_and_units_basic_cases>
            nextitem: <Function test_extract_numbers_and_units_excludes_auxiliaries>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_and_units_basic_cases>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_basic_cases
            location: ('tests_pytest/unit/test_nlp_utils.py', 44, 'test_extract_numbers_and_units_basic_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
          nextitem: <Function test_extract_dates_detects_multiple_formats>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries
            location: ('tests_pytest/unit/test_nlp_utils.py', 54, 'test_extract_numbers_and_units_excludes_auxiliaries')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_numbers_and_units_excludes_auxiliaries>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
            nextitem: <Function test_extract_dates_detects_multiple_formats>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_and_units_excludes_auxiliaries>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_and_units_excludes_auxiliaries
            location: ('tests_pytest/unit/test_nlp_utils.py', 54, 'test_extract_numbers_and_units_excludes_auxiliaries')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_dates_detects_multiple_formats>
          nextitem: <Function test_extract_dates_ignores_invalid_inputs>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats
            location: ('tests_pytest/unit/test_nlp_utils.py', 63, 'test_extract_dates_detects_multiple_formats')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_dates_detects_multiple_formats>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_dates_detects_multiple_formats>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_dates_detects_multiple_formats>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_dates_detects_multiple_formats>
          early skip of rewriting module: dateparser.data.date_translation_data.fr [assertion]
          early skip of rewriting module: tzdata [assertion]
          early skip of rewriting module: tzdata [assertion]
          early skip of rewriting module: tzdata [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_dates_detects_multiple_formats>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_dates_detects_multiple_formats>
            nextitem: <Function test_extract_dates_ignores_invalid_inputs>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_dates_detects_multiple_formats>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_dates_detects_multiple_formats
            location: ('tests_pytest/unit/test_nlp_utils.py', 63, 'test_extract_dates_detects_multiple_formats')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_dates_ignores_invalid_inputs>
          nextitem: <Function test_extract_strong_verbs_detects_known_lemmas>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs
            location: ('tests_pytest/unit/test_nlp_utils.py', 77, 'test_extract_dates_ignores_invalid_inputs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_dates_ignores_invalid_inputs>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_dates_ignores_invalid_inputs>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_dates_ignores_invalid_inputs>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_dates_ignores_invalid_inputs>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_dates_ignores_invalid_inputs>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_dates_ignores_invalid_inputs>
            nextitem: <Function test_extract_strong_verbs_detects_known_lemmas>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_dates_ignores_invalid_inputs>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_dates_ignores_invalid_inputs
            location: ('tests_pytest/unit/test_nlp_utils.py', 77, 'test_extract_dates_ignores_invalid_inputs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_strong_verbs_detects_known_lemmas>
          nextitem: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas
            location: ('tests_pytest/unit/test_nlp_utils.py', 83, 'test_extract_strong_verbs_detects_known_lemmas')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_strong_verbs_detects_known_lemmas>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_strong_verbs_detects_known_lemmas>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_strong_verbs_detects_known_lemmas>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_strong_verbs_detects_known_lemmas>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_strong_verbs_detects_known_lemmas>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_strong_verbs_detects_known_lemmas>
            nextitem: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_strong_verbs_detects_known_lemmas>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_detects_known_lemmas
            location: ('tests_pytest/unit/test_nlp_utils.py', 83, 'test_extract_strong_verbs_detects_known_lemmas')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
          nextitem: <Function test_format_entities_aggregates_all_extractors>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs
            location: ('tests_pytest/unit/test_nlp_utils.py', 97, 'test_extract_strong_verbs_ignores_non_matching_verbs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
            nextitem: <Function test_format_entities_aggregates_all_extractors>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_strong_verbs_ignores_non_matching_verbs>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_strong_verbs_ignores_non_matching_verbs
            location: ('tests_pytest/unit/test_nlp_utils.py', 97, 'test_extract_strong_verbs_ignores_non_matching_verbs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_format_entities_aggregates_all_extractors>
          nextitem: <Function test_compute_datafication_score_high>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors
            location: ('tests_pytest/unit/test_nlp_utils.py', 105, 'test_format_entities_aggregates_all_extractors')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_format_entities_aggregates_all_extractors>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_format_entities_aggregates_all_extractors>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_format_entities_aggregates_all_extractors>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_format_entities_aggregates_all_extractors>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_format_entities_aggregates_all_extractors>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_format_entities_aggregates_all_extractors>
            nextitem: <Function test_compute_datafication_score_high>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_format_entities_aggregates_all_extractors>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_format_entities_aggregates_all_extractors
            location: ('tests_pytest/unit/test_nlp_utils.py', 105, 'test_format_entities_aggregates_all_extractors')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_compute_datafication_score_high>
          nextitem: <Function test_compute_datafication_score_low_density_penalty>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high
            location: ('tests_pytest/unit/test_nlp_utils.py', 124, 'test_compute_datafication_score_high')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_compute_datafication_score_high>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compute_datafication_score_high>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_compute_datafication_score_high>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_compute_datafication_score_high>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compute_datafication_score_high>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_compute_datafication_score_high>
            nextitem: <Function test_compute_datafication_score_low_density_penalty>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compute_datafication_score_high>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_high
            location: ('tests_pytest/unit/test_nlp_utils.py', 124, 'test_compute_datafication_score_high')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_compute_datafication_score_low_density_penalty>
          nextitem: <Function test_group_named_entities_counts_occurrences_by_label>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty
            location: ('tests_pytest/unit/test_nlp_utils.py', 142, 'test_compute_datafication_score_low_density_penalty')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_compute_datafication_score_low_density_penalty>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compute_datafication_score_low_density_penalty>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_compute_datafication_score_low_density_penalty>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_compute_datafication_score_low_density_penalty>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compute_datafication_score_low_density_penalty>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_compute_datafication_score_low_density_penalty>
            nextitem: <Function test_group_named_entities_counts_occurrences_by_label>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_compute_datafication_score_low_density_penalty>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_compute_datafication_score_low_density_penalty
            location: ('tests_pytest/unit/test_nlp_utils.py', 142, 'test_compute_datafication_score_low_density_penalty')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_group_named_entities_counts_occurrences_by_label>
          nextitem: <Function test_interpret_datafication_score_ranges>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label
            location: ('tests_pytest/unit/test_nlp_utils.py', 158, 'test_group_named_entities_counts_occurrences_by_label')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_group_named_entities_counts_occurrences_by_label>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_group_named_entities_counts_occurrences_by_label>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_group_named_entities_counts_occurrences_by_label>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_group_named_entities_counts_occurrences_by_label>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_group_named_entities_counts_occurrences_by_label>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_group_named_entities_counts_occurrences_by_label>
            nextitem: <Function test_interpret_datafication_score_ranges>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_group_named_entities_counts_occurrences_by_label>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_group_named_entities_counts_occurrences_by_label
            location: ('tests_pytest/unit/test_nlp_utils.py', 158, 'test_group_named_entities_counts_occurrences_by_label')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_interpret_datafication_score_ranges>
          nextitem: <Function test_get_article_profile_datajournalisme_eleve>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges
            location: ('tests_pytest/unit/test_nlp_utils.py', 176, 'test_interpret_datafication_score_ranges')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_interpret_datafication_score_ranges>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_interpret_datafication_score_ranges>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_interpret_datafication_score_ranges>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_interpret_datafication_score_ranges>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_interpret_datafication_score_ranges>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_interpret_datafication_score_ranges>
            nextitem: <Function test_get_article_profile_datajournalisme_eleve>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_interpret_datafication_score_ranges>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_interpret_datafication_score_ranges
            location: ('tests_pytest/unit/test_nlp_utils.py', 176, 'test_interpret_datafication_score_ranges')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_article_profile_datajournalisme_eleve>
          nextitem: <Function test_get_article_profile_localise_temporel>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve
            location: ('tests_pytest/unit/test_nlp_utils.py', 184, 'test_get_article_profile_datajournalisme_eleve')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_article_profile_datajournalisme_eleve>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_datajournalisme_eleve>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_article_profile_datajournalisme_eleve>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_article_profile_datajournalisme_eleve>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_datajournalisme_eleve>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_article_profile_datajournalisme_eleve>
            nextitem: <Function test_get_article_profile_localise_temporel>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_datajournalisme_eleve>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_datajournalisme_eleve
            location: ('tests_pytest/unit/test_nlp_utils.py', 184, 'test_get_article_profile_datajournalisme_eleve')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_article_profile_localise_temporel>
          nextitem: <Function test_get_article_profile_narratif_descriptif>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel
            location: ('tests_pytest/unit/test_nlp_utils.py', 196, 'test_get_article_profile_localise_temporel')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_article_profile_localise_temporel>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_localise_temporel>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_article_profile_localise_temporel>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_article_profile_localise_temporel>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_localise_temporel>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_article_profile_localise_temporel>
            nextitem: <Function test_get_article_profile_narratif_descriptif>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_localise_temporel>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_localise_temporel
            location: ('tests_pytest/unit/test_nlp_utils.py', 196, 'test_get_article_profile_localise_temporel')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_article_profile_narratif_descriptif>
          nextitem: <Function test_get_article_profile_structure_quantifiable>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif
            location: ('tests_pytest/unit/test_nlp_utils.py', 208, 'test_get_article_profile_narratif_descriptif')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_article_profile_narratif_descriptif>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_narratif_descriptif>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_article_profile_narratif_descriptif>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_article_profile_narratif_descriptif>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_narratif_descriptif>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_article_profile_narratif_descriptif>
            nextitem: <Function test_get_article_profile_structure_quantifiable>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_narratif_descriptif>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_narratif_descriptif
            location: ('tests_pytest/unit/test_nlp_utils.py', 208, 'test_get_article_profile_narratif_descriptif')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_article_profile_structure_quantifiable>
          nextitem: <Function test_get_article_profile_exploratoire>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable
            location: ('tests_pytest/unit/test_nlp_utils.py', 220, 'test_get_article_profile_structure_quantifiable')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_article_profile_structure_quantifiable>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_structure_quantifiable>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_article_profile_structure_quantifiable>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_article_profile_structure_quantifiable>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_structure_quantifiable>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_article_profile_structure_quantifiable>
            nextitem: <Function test_get_article_profile_exploratoire>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_structure_quantifiable>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_structure_quantifiable
            location: ('tests_pytest/unit/test_nlp_utils.py', 220, 'test_get_article_profile_structure_quantifiable')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_article_profile_exploratoire>
          nextitem: <Function test_extract_numbers_excludes_unit_est>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire
            location: ('tests_pytest/unit/test_nlp_utils.py', 232, 'test_get_article_profile_exploratoire')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_article_profile_exploratoire>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_exploratoire>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_article_profile_exploratoire>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_article_profile_exploratoire>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_exploratoire>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_article_profile_exploratoire>
            nextitem: <Function test_extract_numbers_excludes_unit_est>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_article_profile_exploratoire>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_get_article_profile_exploratoire
            location: ('tests_pytest/unit/test_nlp_utils.py', 232, 'test_get_article_profile_exploratoire')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_extract_numbers_excludes_unit_est>
          nextitem: <Function test_login_get_page>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est
            location: ('tests_pytest/unit/test_nlp_utils.py', 244, 'test_extract_numbers_excludes_unit_est')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_extract_numbers_excludes_unit_est>
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_excludes_unit_est>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_extract_numbers_excludes_unit_est>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_extract_numbers_excludes_unit_est>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_excludes_unit_est>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_extract_numbers_excludes_unit_est>
            nextitem: <Function test_login_get_page>
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_extract_numbers_excludes_unit_est>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/unit/test_nlp_utils.py::test_extract_numbers_excludes_unit_est
            location: ('tests_pytest/unit/test_nlp_utils.py', 244, 'test_extract_numbers_excludes_unit_est')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_login_get_page>
          nextitem: <Function test_login_post_valid_email>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_login_get_page
            location: ('tests_pytest/integration/test_routes.py', 18, 'test_login_get_page')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_login_get_page>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_login_get_page>>
          early skip of rewriting module: app.routes [assertion]
          early skip of rewriting module: langdetect [assertion]
          early skip of rewriting module: langdetect.detector_factory [assertion]
          early skip of rewriting module: simplejson [assertion]
          early skip of rewriting module: langdetect.detector [assertion]
          early skip of rewriting module: langdetect.lang_detect_exception [assertion]
          early skip of rewriting module: langdetect.language [assertion]
          early skip of rewriting module: langdetect.utils [assertion]
          early skip of rewriting module: langdetect.utils.ngram [assertion]
          early skip of rewriting module: langdetect.utils.messages [assertion]
          early skip of rewriting module: langdetect.utils.unicode_block [assertion]
          early skip of rewriting module: encodings.unicode_escape [assertion]
          early skip of rewriting module: langdetect.utils.lang_profile [assertion]
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_login_get_page>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_login_get_page>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_login_get_page>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_login_get_page>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_login_get_page>
            nextitem: <Function test_login_post_valid_email>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_login_get_page>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_login_get_page>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_get_page' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_login_get_page
            location: ('tests_pytest/integration/test_routes.py', 18, 'test_login_get_page')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_login_post_valid_email>
          nextitem: <Function test_homepage_loads>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_login_post_valid_email
            location: ('tests_pytest/integration/test_routes.py', 27, 'test_login_post_valid_email')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_login_post_valid_email>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_login_post_valid_email>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_login_post_valid_email>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_login_post_valid_email>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_login_post_valid_email>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_login_post_valid_email>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_login_post_valid_email>
            nextitem: <Function test_homepage_loads>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_login_post_valid_email>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_login_post_valid_email>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_login_post_valid_email' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_login_post_valid_email
            location: ('tests_pytest/integration/test_routes.py', 27, 'test_login_post_valid_email')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_homepage_loads>
          nextitem: <Function test_analyze_route_with_text>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_homepage_loads
            location: ('tests_pytest/integration/test_routes.py', 37, 'test_homepage_loads')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_homepage_loads>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_homepage_loads>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_homepage_loads>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_homepage_loads>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_homepage_loads>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_homepage_loads>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_homepage_loads>
            nextitem: <Function test_analyze_route_with_text>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_homepage_loads>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_homepage_loads>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_homepage_loads' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_homepage_loads
            location: ('tests_pytest/integration/test_routes.py', 37, 'test_homepage_loads')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_analyze_route_with_text>
          nextitem: <Function test_about_page_loads>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_analyze_route_with_text
            location: ('tests_pytest/integration/test_routes.py', 43, 'test_analyze_route_with_text')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_analyze_route_with_text>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_analyze_route_with_text>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_route_with_text>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_analyze_route_with_text>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_analyze_route_with_text>
          early skip of rewriting module: dateparser.data.date_translation_data.en [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_route_with_text>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_analyze_route_with_text>
            nextitem: <Function test_about_page_loads>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_analyze_route_with_text>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_route_with_text>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_text' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_analyze_route_with_text
            location: ('tests_pytest/integration/test_routes.py', 43, 'test_analyze_route_with_text')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_about_page_loads>
          nextitem: <Function test_analyze_with_uploaded_txt_file>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_about_page_loads
            location: ('tests_pytest/integration/test_routes.py', 52, 'test_about_page_loads')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_about_page_loads>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_about_page_loads>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_about_page_loads>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_about_page_loads>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_about_page_loads>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_about_page_loads>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_about_page_loads>
            nextitem: <Function test_analyze_with_uploaded_txt_file>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_about_page_loads>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_about_page_loads>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_about_page_loads' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_about_page_loads
            location: ('tests_pytest/integration/test_routes.py', 52, 'test_about_page_loads')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_analyze_with_uploaded_txt_file>
          nextitem: <Function test_analyze_route_with_empty_text>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file
            location: ('tests_pytest/integration/test_routes.py', 58, 'test_analyze_with_uploaded_txt_file')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_analyze_with_uploaded_txt_file>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_analyze_with_uploaded_txt_file>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_with_uploaded_txt_file>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_analyze_with_uploaded_txt_file>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_analyze_with_uploaded_txt_file>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_with_uploaded_txt_file>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_analyze_with_uploaded_txt_file>
            nextitem: <Function test_analyze_route_with_empty_text>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_analyze_with_uploaded_txt_file>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_with_uploaded_txt_file>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_analyze_with_uploaded_txt_file
            location: ('tests_pytest/integration/test_routes.py', 58, 'test_analyze_with_uploaded_txt_file')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_analyze_route_with_empty_text>
          nextitem: <Function test_download_route_returns_markdown>
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text
            location: ('tests_pytest/integration/test_routes.py', 68, 'test_analyze_route_with_empty_text')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_analyze_route_with_empty_text>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_analyze_route_with_empty_text>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_route_with_empty_text>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_analyze_route_with_empty_text>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_analyze_route_with_empty_text>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_route_with_empty_text>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_analyze_route_with_empty_text>
            nextitem: <Function test_download_route_returns_markdown>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_analyze_route_with_empty_text>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_analyze_route_with_empty_text>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_analyze_route_with_empty_text
            location: ('tests_pytest/integration/test_routes.py', 68, 'test_analyze_route_with_empty_text')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_download_route_returns_markdown>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_download_route_returns_markdown
            location: ('tests_pytest/integration/test_routes.py', 74, 'test_download_route_returns_markdown')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_download_route_returns_markdown>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_download_route_returns_markdown>>
          finish pytest_fixture_setup --> <FlaskClient <Flask 'app'>> [hook]
        finish pytest_runtest_setup --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_download_route_returns_markdown>
            call: <CallInfo when='setup' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_download_route_returns_markdown>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_download_route_returns_markdown>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_download_route_returns_markdown>
            call: <CallInfo when='call' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_download_route_returns_markdown>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='client' scope='function' baseid='tests_pytest/integration/test_routes.py'>
              request: <SubRequest 'client' for <Function test_download_route_returns_markdown>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> None [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_download_route_returns_markdown>
            call: <CallInfo when='teardown' result: None>
        finish pytest_runtest_makereport --> <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests_pytest/integration/test_routes.py::test_download_route_returns_markdown' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x75368c7d3e30>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests_pytest/integration/test_routes.py::test_download_route_returns_markdown
            location: ('tests_pytest/integration/test_routes.py', 74, 'test_download_route_returns_markdown')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=0 testsfailed=0 testscollected=44>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x75368b074c50>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x75368c7d3e30>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x75368c7d3e30>
    finish pytest_unconfigure --> [] [hook]
